// <auto-generated />
using System;
using Astra_MK1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Astra_MK1.Migrations
{
    [DbContext(typeof(astraDbContext))]
    [Migration("20230414155037_astraMK1")]
    partial class astraMK1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdActorType", b =>
                {
                    b.Property<int>("mdActorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdActorTypeId"));

                    b.Property<string>("actorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("parentActorTypeId")
                        .HasColumnType("int");

                    b.HasKey("mdActorTypeId");

                    b.HasIndex("parentActorTypeId");

                    b.ToTable("mdActorTypes", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetCategory", b =>
                {
                    b.Property<int>("mdAssetCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdAssetCategoryId"));

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mdAssetCategoryId");

                    b.ToTable("mdAssetCategories", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", b =>
                {
                    b.Property<int>("mdAssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdAssetTypeId"));

                    b.Property<string>("assetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("depreciation")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("parentAssetID")
                        .HasColumnType("int");

                    b.HasKey("mdAssetTypeId");

                    b.HasIndex("parentAssetID");

                    b.ToTable("mdAssetTypes", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthAccessLevel", b =>
                {
                    b.Property<int>("mdAuthAccessLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdAuthAccessLevelId"));

                    b.Property<int?>("authorityLevelId")
                        .HasColumnType("int");

                    b.Property<bool?>("canCreate")
                        .HasColumnType("bit");

                    b.Property<bool?>("canDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("canRead")
                        .HasColumnType("bit");

                    b.Property<bool?>("canUpdate")
                        .HasColumnType("bit");

                    b.Property<int?>("stakeThreshold")
                        .HasColumnType("int");

                    b.HasKey("mdAuthAccessLevelId");

                    b.HasIndex("authorityLevelId");

                    b.HasIndex("stakeThreshold")
                        .IsUnique()
                        .HasFilter("[stakeThreshold] IS NOT NULL");

                    b.ToTable("mdAuthAccessLevels", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthorityLevel", b =>
                {
                    b.Property<int>("mdAuthorityLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdAuthorityLevelId"));

                    b.Property<string>("authorityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdAuthorityLevelId");

                    b.ToTable("mdAuthorityLevels", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCapacityMesaurementUnit", b =>
                {
                    b.Property<int>("mdCapacityMeasurementUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdCapacityMeasurementUnitId"));

                    b.Property<string>("categoryMesaurementUnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("outOf")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("timeUnitId")
                        .HasColumnType("int");

                    b.HasKey("mdCapacityMeasurementUnitId");

                    b.HasIndex("outOf");

                    b.ToTable("mdCapacityMeasurementUnits", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCapacityUnitMeasurementCategory", b =>
                {
                    b.Property<int>("mdCapacityUnitMeasurementCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdCapacityUnitMeasurementCategoryId"));

                    b.Property<string>("categoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mdCapacityUnitMeasurementCategoryId");

                    b.ToTable("mdCapacityUnitMeasurementCategories", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCompetencyLevel", b =>
                {
                    b.Property<int>("mdCompetencyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdCompetencyLevelId"));

                    b.Property<string>("competencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mdCompetencyLevelId");

                    b.ToTable("mdCompetencyLevels", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdComplexity", b =>
                {
                    b.Property<int>("mdComplexityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdComplexityId"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qualityIndicator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("quantityIndicator")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("mdComplexityId");

                    b.ToTable("mdComplexities", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCumulativeStakeCap", b =>
                {
                    b.Property<int>("mdCumulativeStakeCapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdCumulativeStakeCapId"));

                    b.Property<decimal?>("maxCap")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("mdAuthAccessLevelId")
                        .HasColumnType("int");

                    b.Property<decimal?>("minCap")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("mdCumulativeStakeCapId");

                    b.ToTable("mdCumulativeStakeCaps", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdDriverType", b =>
                {
                    b.Property<int>("mdDriverTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdDriverTypeId"));

                    b.Property<string>("driverTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("parentDriverTypeId")
                        .HasColumnType("int");

                    b.HasKey("mdDriverTypeId");

                    b.HasIndex("parentDriverTypeId");

                    b.ToTable("mdDriverTypes", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdFrequency", b =>
                {
                    b.Property<int>("mdFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdFrequencyId"));

                    b.Property<DateTime?>("rangeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("rangeStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("specific")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("startAt")
                        .HasColumnType("datetime2");

                    b.HasKey("mdFrequencyId");

                    b.ToTable("mdFrequencies", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", b =>
                {
                    b.Property<int>("mdGeneralScaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdGeneralScaleId"));

                    b.Property<string>("qualityIndicator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("quantityIndicator")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("mdGeneralScaleId");

                    b.ToTable("mdGeneralScales", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGoalType", b =>
                {
                    b.Property<int>("mdGoalTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdGoalTypeId"));

                    b.Property<string>("goalTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdGoalTypeId");

                    b.ToTable("mdGoalTypes", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdImpact", b =>
                {
                    b.Property<int>("mdImpactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdImpactId"));

                    b.Property<string>("qualityIndicator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("quantityIndicator")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("mdImpactId");

                    b.ToTable("mdImpacts", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdManagementMethod", b =>
                {
                    b.Property<int>("mdManagementMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdManagementMethodId"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("methodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("parentMethodId")
                        .HasColumnType("int");

                    b.HasKey("mdManagementMethodId");

                    b.HasIndex("parentMethodId");

                    b.ToTable("mdManagementMethods", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdMotivationalDimension", b =>
                {
                    b.Property<int>("mdMotivationalDimensionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdMotivationalDimensionId"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dimensionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("mdMotivationalDimensionId");

                    b.ToTable("mdMotivationalDimensions", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPhase", b =>
                {
                    b.Property<int>("mdPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdPhaseId"));

                    b.Property<int?>("ManagementmethodId")
                        .HasColumnType("int");

                    b.Property<string>("phaseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("phaseSequence")
                        .HasColumnType("int");

                    b.HasKey("mdPhaseId");

                    b.HasIndex("ManagementmethodId");

                    b.ToTable("mdPhases", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPortfolioCategory", b =>
                {
                    b.Property<int>("mdPortfolioCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdPortfolioCategoryId"));

                    b.Property<string>("portfolioName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdPortfolioCategoryId");

                    b.ToTable("mdPortfolioCategories", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPredicate", b =>
                {
                    b.Property<int>("mdPredicateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdPredicateId"));

                    b.Property<string>("predicateFormula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdPredicateId");

                    b.ToTable("mdPredicates", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdRoleType", b =>
                {
                    b.Property<int>("mdRoleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdRoleTypeId"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("roleTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdRoleTypeId");

                    b.ToTable("mdRoleTypes", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdSecurityQuestion", b =>
                {
                    b.Property<int>("mdSecurityQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdSecurityQuestionId"));

                    b.Property<string>("securityQuestion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("mdSecurityQuestionId");

                    b.ToTable("mdSecurityQuestions", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdSkillType", b =>
                {
                    b.Property<int>("mdSkillTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdSkillTypeId"));

                    b.Property<string>("skillTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdSkillTypeId");

                    b.ToTable("mdSkillTypes", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdStake", b =>
                {
                    b.Property<int>("mdStakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdStakeId"));

                    b.Property<string>("stakeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdStakeId");

                    b.ToTable("mdStakes", "PortfolioMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCLType", b =>
                {
                    b.Property<int>("refCLTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refCLTypeId"));

                    b.Property<string>("clTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("refCLTypeId");

                    b.ToTable("refCLTypes", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCostComponent", b =>
                {
                    b.Property<long>("refCostComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("refCostComponentId"));

                    b.Property<string>("costComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("refCostComponentId");

                    b.ToTable("refCostComponents", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refDeliverable", b =>
                {
                    b.Property<long>("refDeliverableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("refDeliverableId"));

                    b.Property<string>("deliverableDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deliverableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("deliverableTypeId")
                        .HasColumnType("int");

                    b.HasKey("refDeliverableId");

                    b.HasIndex("deliverableTypeId");

                    b.ToTable("refDeliverables", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refIncidentStatus", b =>
                {
                    b.Property<int>("refIncidentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refIncidentStatusId"));

                    b.Property<string>("incidentStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refIncidentStatusId");

                    b.ToTable("refIncidentStatuses", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", b =>
                {
                    b.Property<int>("refJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refJobId"));

                    b.Property<string>("jobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("parentJobId")
                        .HasColumnType("int");

                    b.HasKey("refJobId");

                    b.HasIndex("parentJobId");

                    b.ToTable("refJobs", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOpExType", b =>
                {
                    b.Property<int>("refOpExTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refOpExTypeId"));

                    b.Property<string>("opexTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refOpExTypeId");

                    b.ToTable("refOpExTypes", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOrgStatus", b =>
                {
                    b.Property<int>("refOrgStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refOrgStatusId"));

                    b.Property<string>("orgStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refOrgStatusId");

                    b.ToTable("refOrgStatuses", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOrgType", b =>
                {
                    b.Property<int>("refOrgTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refOrgTypeId"));

                    b.Property<string>("orgTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refOrgTypeId");

                    b.ToTable("refOrgTypes", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refPhoneType", b =>
                {
                    b.Property<long>("refPhoneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("refPhoneTypeId"));

                    b.Property<string>("phoneTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refPhoneTypeId");

                    b.ToTable("refPhoneTypes", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refProcurementDocumentType", b =>
                {
                    b.Property<int>("refProcurementDocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refProcurementDocumentTypeId"));

                    b.Property<string>("procDocName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("refProcurementDocumentTypeId");

                    b.ToTable("refProcurementDocumentTypes", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refProcurementType", b =>
                {
                    b.Property<int>("refProcurementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refProcurementTypeId"));

                    b.Property<string>("procTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("procTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refProcurementTypeId");

                    b.ToTable("refProcurementTypes", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRank", b =>
                {
                    b.Property<int>("refRankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refRankId"));

                    b.Property<string>("rankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refRankId");

                    b.ToTable("refRanks", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRole", b =>
                {
                    b.Property<int>("refRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refRoleId"));

                    b.Property<int?>("roleContextId")
                        .HasColumnType("int");

                    b.Property<string>("roleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("roleTypeId")
                        .HasColumnType("int");

                    b.HasKey("refRoleId");

                    b.HasIndex("roleContextId");

                    b.HasIndex("roleTypeId");

                    b.ToTable("refRoles", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRoleContext", b =>
                {
                    b.Property<int>("refRoleContextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refRoleContextId"));

                    b.Property<string>("roleContextName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refRoleContextId");

                    b.ToTable("refRoleContexts", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refSkill", b =>
                {
                    b.Property<int>("refSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refSkillId"));

                    b.Property<int?>("parentSkillId")
                        .HasColumnType("int");

                    b.Property<string>("skillDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("skillName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("refSkillId");

                    b.HasIndex("parentSkillId");

                    b.ToTable("refSkills", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refTimeUnit", b =>
                {
                    b.Property<int>("refTimeUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("refTimeUnitId"));

                    b.Property<string>("timeUnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("timeUnitValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("refTimeUnitId");

                    b.ToTable("refTimeUnits", "PortfolioRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.alertService", b =>
                {
                    b.Property<long>("alertServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("alertServiceId"));

                    b.Property<int?>("alertFrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("alertIntervalId")
                        .HasColumnType("int");

                    b.Property<int?>("alertStartingPoint")
                        .HasColumnType("int");

                    b.HasKey("alertServiceId");

                    b.HasIndex("alertFrequencyId");

                    b.HasIndex("alertIntervalId");

                    b.ToTable("alertServices", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnActorRole", b =>
                {
                    b.Property<long>("asnActorRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnActorRoleId"));

                    b.Property<long?>("asnOrgActorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnOrgRoleId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("fullfillmentPct")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("reasonFor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("asnActorRoleId");

                    b.HasIndex("asnOrgRoleId");

                    b.HasIndex("asnOrgActorId", "asnOrgRoleId");

                    b.ToTable("asnActorRoles", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnActorSkill", b =>
                {
                    b.Property<long>("asnOrgActorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnSkillParamId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnOrgActorId", "asnSkillParamId");

                    b.HasIndex("asnSkillParamId");

                    b.ToTable("asnActorSkills", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnGroupJob", b =>
                {
                    b.Property<long>("asnGroupJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnGroupJobId"));

                    b.Property<long?>("asnGroupJoborgGroupId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("asnGroupRefJobId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("contributionPercentage")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("jobPriority")
                        .HasColumnType("int");

                    b.HasKey("asnGroupJobId");

                    b.HasIndex("asnGroupRefJobId");

                    b.HasIndex("asnGroupJoborgGroupId", "asnGroupRefJobId");

                    b.ToTable("asnGroupJobs", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnGroupRole", b =>
                {
                    b.Property<long>("asnOrgGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnOrgRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnGroupRoleId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnOrgGroupId", "asnOrgRoleId");

                    b.HasIndex("asnOrgRoleId");

                    b.ToTable("asnGroupRoles", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnGroupSkill", b =>
                {
                    b.Property<long>("asnOrgGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnSkillParamId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnGroupSkillId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnOrgGroupId", "asnSkillParamId");

                    b.HasIndex("asnSkillParamId");

                    b.ToTable("asnGroupSkills", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnIncidentEscalationRoleGroup", b =>
                {
                    b.Property<long>("asnIncidentEscalationRoleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnIncidentEscalationRoleGroupId"));

                    b.Property<long?>("asnIncidentEsclationGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnIncidentEsclationRoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnIncidentEsclationlLevelId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnIncidentEscalationRoleGroupId");

                    b.HasIndex("asnIncidentEsclationGroupId");

                    b.HasIndex("asnIncidentEsclationRoleId");

                    b.HasIndex("asnIncidentEsclationlLevelId");

                    b.ToTable("asnIncidentEscalationRoleGroups", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnJobAssetAuth", b =>
                {
                    b.Property<long?>("asnAssetPortfolioId")
                        .HasColumnType("bigint");

                    b.Property<int?>("asnAssetAuthRefJobId")
                        .HasColumnType("int");

                    b.Property<int?>("asnAuthAccessLevelId")
                        .HasColumnType("int");

                    b.Property<long>("asnJobAssetAuthId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("cascadeAuthToChildAssets")
                        .HasColumnType("bit");

                    b.Property<bool?>("cascadeAuthTochildJobs")
                        .HasColumnType("bit");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnAssetPortfolioId", "asnAssetAuthRefJobId", "asnAuthAccessLevelId");

                    b.HasIndex("asnAssetAuthRefJobId");

                    b.HasIndex("asnAuthAccessLevelId");

                    b.ToTable("asnJobAssetAuths", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnJobDeliverable", b =>
                {
                    b.Property<long>("asnDeliverableId")
                        .HasColumnType("bigint");

                    b.Property<int>("asnJobId")
                        .HasColumnType("int");

                    b.Property<long>("asnJobDeliverableId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("fulfillmentPercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnDeliverableId", "asnJobId");

                    b.HasIndex("asnJobId");

                    b.ToTable("asnJobDeliverables", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnMotivational", b =>
                {
                    b.Property<long>("asnMotivationalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnMotivationalId"));

                    b.Property<long?>("asnDeliverableId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("asnGoalId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long>("asnMilestoneId")
                        .HasColumnType("bigint");

                    b.Property<int?>("asnOperationId")
                        .HasColumnType("int");

                    b.Property<long?>("asnOrgDriverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnOrgStructureId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("fulfillmentPercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("thisPriorityId")
                        .HasColumnType("int");

                    b.HasKey("asnMotivationalId");

                    b.HasIndex("asnDeliverableId");

                    b.HasIndex("asnGoalId");

                    b.HasIndex("asnMilestoneId");

                    b.HasIndex("asnOperationId");

                    b.HasIndex("asnOrgDriverId");

                    b.HasIndex("asnOrgStructureId");

                    b.HasIndex("thisPriorityId");

                    b.ToTable("asnMotivationals", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnMotivationalRole", b =>
                {
                    b.Property<int>("asnAuthorityLevelId")
                        .HasColumnType("int");

                    b.Property<long>("refAsnMotivationalId")
                        .HasColumnType("bigint");

                    b.Property<int>("stakeholderTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("stakeholderRoleId")
                        .HasColumnType("int");

                    b.Property<long?>("stakeholderGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnMotivationalRoleId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("stakePercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("asnAuthorityLevelId", "refAsnMotivationalId", "stakeholderTypeId", "stakeholderRoleId", "stakeholderGroupId");

                    b.HasIndex("refAsnMotivationalId");

                    b.HasIndex("stakeholderGroupId");

                    b.HasIndex("stakeholderRoleId");

                    b.HasIndex("stakeholderTypeId");

                    b.ToTable("asnMotivationalRoles", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnMotivationalSkill", b =>
                {
                    b.Property<long>("asnMotivationalSkillId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnSkillParamId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<long>("refAsnMotivationalId")
                        .HasColumnType("bigint");

                    b.HasKey("asnMotivationalSkillId", "asnSkillParamId");

                    b.HasIndex("asnSkillParamId");

                    b.HasIndex("refAsnMotivationalId");

                    b.ToTable("asnMotivationalSkills", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnRoleJob", b =>
                {
                    b.Property<int?>("asnJobId")
                        .HasColumnType("int");

                    b.Property<int?>("asnRoleId")
                        .HasColumnType("int");

                    b.Property<long>("asnRoleJobId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("contributionPercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("roleJobPriority")
                        .HasColumnType("int");

                    b.HasKey("asnJobId", "asnRoleId");

                    b.HasIndex("asnRoleId");

                    b.ToTable("asnRoleJobs", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnRoleSkill", b =>
                {
                    b.Property<int>("asnRoleId")
                        .HasColumnType("int");

                    b.Property<long?>("asnSkillParamId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnRoleId", "asnSkillParamId");

                    b.HasIndex("asnSkillParamId");

                    b.ToTable("asnRoleSkill", "PortfolioASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.assetCapacityUtilizationRecord", b =>
                {
                    b.Property<long>("assetCapacityUtilizationRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("assetCapacityUtilizationRecordId"));

                    b.Property<long>("assetRecordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("utilizationAsOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("utilizationEffeciency")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("utilizationPct")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("assetCapacityUtilizationRecordId");

                    b.HasIndex("assetRecordId");

                    b.ToTable("assetCapacityUtilizationRecords", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.assetComplexRelationAnalysis", b =>
                {
                    b.Property<long>("assetComplexRelationAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("assetComplexRelationAnalysisId"));

                    b.Property<long?>("assetBuildingBlockId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("buildingBlockCapacityUtilization")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("buildingBlockNonAvailabilityImpactId")
                        .HasColumnType("int");

                    b.Property<int?>("buildingBlockVitalityId")
                        .HasColumnType("int");

                    b.Property<int?>("fulfillmentWeightageId")
                        .HasColumnType("int");

                    b.Property<decimal?>("fullfilmentPercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool?>("isAggregated")
                        .HasColumnType("bit");

                    b.Property<bool?>("isChild")
                        .HasColumnType("bit");

                    b.Property<bool?>("isComposed")
                        .HasColumnType("bit");

                    b.Property<long?>("sourceAssetId")
                        .HasColumnType("bigint");

                    b.HasKey("assetComplexRelationAnalysisId");

                    b.HasIndex("assetBuildingBlockId");

                    b.HasIndex("buildingBlockNonAvailabilityImpactId");

                    b.HasIndex("buildingBlockVitalityId");

                    b.HasIndex("fulfillmentWeightageId");

                    b.HasIndex("sourceAssetId");

                    b.ToTable("assetComplexRelationAnalysis", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", b =>
                {
                    b.Property<long>("assetPortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("assetPortfolioId"));

                    b.Property<decimal?>("applicableDepreciation")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<long?>("assetCapacityDesignId")
                        .HasColumnType("bigint");

                    b.Property<int?>("assetCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("assetComplexityId")
                        .HasColumnType("int");

                    b.Property<string>("assetDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("assetManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("assetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("assetOwnerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("assetPortfolioCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("assetStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("assetTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("assetVolumeId")
                        .HasColumnType("int");

                    b.Property<int?>("cumulativeDependencyImpactId")
                        .HasColumnType("int");

                    b.Property<int?>("cumulativeVitalityIndicatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("inwardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("keyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("lossPerDay")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("operatingCostPerDay")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<long?>("parentAssetId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("uniqueAssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("utilizationMonitorFrequencyId")
                        .HasColumnType("int");

                    b.HasKey("assetPortfolioId");

                    b.HasIndex("assetCapacityDesignId")
                        .IsUnique()
                        .HasFilter("[assetCapacityDesignId] IS NOT NULL");

                    b.HasIndex("assetCategoryId");

                    b.HasIndex("assetComplexityId");

                    b.HasIndex("assetManagerId");

                    b.HasIndex("assetOwnerId");

                    b.HasIndex("assetPortfolioCategoryId");

                    b.HasIndex("assetStatusId");

                    b.HasIndex("assetTypeId");

                    b.HasIndex("assetVolumeId");

                    b.HasIndex("cumulativeDependencyImpactId");

                    b.HasIndex("cumulativeVitalityIndicatorId");

                    b.HasIndex("parentAssetId");

                    b.HasIndex("utilizationMonitorFrequencyId");

                    b.ToTable("assetsPortfolio", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.astraHistory", b =>
                {
                    b.Property<long>("astraHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("astraHistoryId"));

                    b.Property<long?>("actionByActorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("actionByGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("actionByRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("actionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("enterpriseElementId")
                        .HasColumnType("bigint");

                    b.Property<int>("historyAction")
                        .HasColumnType("int");

                    b.Property<long?>("historyAssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("historyDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("historyDeliverableId")
                        .HasColumnType("bigint");

                    b.Property<long?>("historyDriverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("historyGoalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("historyMilestoneId")
                        .HasColumnType("bigint");

                    b.Property<long?>("historyStructureId")
                        .HasColumnType("bigint");

                    b.HasKey("astraHistoryId");

                    b.HasIndex("actionByActorId");

                    b.HasIndex("actionByGroupId");

                    b.HasIndex("actionByRoleId");

                    b.HasIndex("enterpriseElementId");

                    b.HasIndex("historyAssetId");

                    b.HasIndex("historyDeliverableId");

                    b.HasIndex("historyDriverId");

                    b.HasIndex("historyGoalId");

                    b.HasIndex("historyMilestoneId");

                    b.HasIndex("historyStructureId");

                    b.ToTable("astraHistory", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capExCostComponent", b =>
                {
                    b.Property<long>("refCapExDetailId")
                        .HasColumnType("bigint");

                    b.Property<long?>("costComponentId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("capExCost")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("capExCurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("refCapExDetailId", "costComponentId");

                    b.HasIndex("costComponentId");

                    b.ToTable("capExCostComponents", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capExDetail", b =>
                {
                    b.Property<long>("capExDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("capExDetailId"));

                    b.Property<long?>("refProcurementDetailId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("totalCapExpenditure")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("capExDetailId");

                    b.HasIndex("refProcurementDetailId");

                    b.ToTable("capExDetails", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capacityDesign", b =>
                {
                    b.Property<long>("capacityDesignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("capacityDesignId"));

                    b.Property<int?>("capacityMeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("designedCapacity")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("effectiveCapacity")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("capacityDesignId");

                    b.HasIndex("capacityMeasurementUnitId");

                    b.ToTable("capacityDesigns", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capacitySpending", b =>
                {
                    b.Property<long>("capacitySpendingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("capacitySpendingId"));

                    b.Property<decimal?>("CapacitySpending")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<long?>("assetCapacitySpendingId")
                        .HasColumnType("bigint");

                    b.Property<int?>("capacitySpendingMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("capacitySpendingId");

                    b.HasIndex("assetCapacitySpendingId");

                    b.HasIndex("capacitySpendingMeasurementId")
                        .IsUnique()
                        .HasFilter("[capacitySpendingMeasurementId] IS NOT NULL");

                    b.ToTable("capacitySpendings", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.cotsProcurementDetail", b =>
                {
                    b.Property<long>("cotsProcurementDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("cotsProcurementDetailId"));

                    b.Property<DateTime?>("clExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("clInit")
                        .HasColumnType("datetime2");

                    b.Property<string>("clName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("cotsProcurementCLTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("procurementdetailRefId")
                        .HasColumnType("bigint");

                    b.HasKey("cotsProcurementDetailId");

                    b.HasIndex("cotsProcurementCLTypeId");

                    b.HasIndex("procurementdetailRefId");

                    b.ToTable("cotsProcurementDetails", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentEscalationModelGroup", b =>
                {
                    b.Property<long>("incidentEscalationModelGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("incidentEscalationModelGroupId"));

                    b.Property<string>("escalationModelGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("incidentEscalationModelGroupId");

                    b.ToTable("incidentEscalationModelGroup", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentEsclationModel", b =>
                {
                    b.Property<long>("incidentEsclationModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("incidentEsclationModelId"));

                    b.Property<int?>("escalationLevel")
                        .HasColumnType("int");

                    b.Property<string>("esclationModelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("incidentEsclationGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("incidentEsclationModelId");

                    b.HasIndex("incidentEsclationGroupId");

                    b.ToTable("incidentEscalationModel", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementAttachment", b =>
                {
                    b.Property<long>("incidentManagementAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("incidentManagementAttachmentId"));

                    b.Property<byte[]>("attachmentChecksum")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("attachmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("attachmentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("attachmentOfManagementRecordId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("incidentAttachment")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("incidentManagementAttachmentId");

                    b.HasIndex("attachmentOfManagementRecordId");

                    b.ToTable("incidentManagementAttachments", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementRecord", b =>
                {
                    b.Property<long>("incidentManagementRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("incidentManagementRecordId"));

                    b.Property<DateTime?>("incidentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("incidentImpactId")
                        .HasColumnType("int");

                    b.Property<long?>("incidentManagementRecordServiceLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("incidentManagementRecordStatusId")
                        .HasColumnType("bigint");

                    b.Property<int?>("incidentPriorityId")
                        .HasColumnType("int");

                    b.Property<string>("incidentRecordDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("incidentSubjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("parentIncidentId")
                        .HasColumnType("bigint");

                    b.HasKey("incidentManagementRecordId");

                    b.HasIndex("incidentImpactId");

                    b.HasIndex("incidentManagementRecordServiceLevelId");

                    b.HasIndex("incidentManagementRecordStatusId");

                    b.HasIndex("incidentPriorityId");

                    b.HasIndex("incidentSubjectId");

                    b.HasIndex("parentIncidentId");

                    b.HasIndex("incidentManagementRecordId", "incidentManagementRecordStatusId", "incidentSubjectId")
                        .IsUnique()
                        .HasFilter("[incidentSubjectId] IS NOT NULL");

                    b.ToTable("incidentManagementRecords", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementStatus", b =>
                {
                    b.Property<long>("incidentManagementStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("incidentManagementStatusId"));

                    b.Property<long?>("assignedToOrgGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("assignedToOrgRoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("assignedToOrgStructureId")
                        .HasColumnType("bigint");

                    b.Property<int?>("incidentStatusRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("statusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("statusNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("incidentManagementStatusId");

                    b.HasIndex("assignedToOrgGroupId");

                    b.HasIndex("assignedToOrgRoleId");

                    b.HasIndex("assignedToOrgStructureId");

                    b.HasIndex("incidentStatusRefId");

                    b.ToTable("incidentManagementStatuses", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.locPhone", b =>
                {
                    b.Property<long>("locPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("locPhoneId"));

                    b.Property<string>("isdCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long?>("locPhoneTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("orgLocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("stdCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("telNumber")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("locPhoneId");

                    b.HasIndex("locPhoneTypeId")
                        .IsUnique()
                        .HasFilter("[locPhoneTypeId] IS NOT NULL");

                    b.HasIndex("orgLocationId");

                    b.ToTable("locPhones", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.motivationalDimensionOfImportance", b =>
                {
                    b.Property<long>("motivationalDimensionOfImportanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("motivationalDimensionOfImportanceId"));

                    b.Property<long?>("dimOrgDriverId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("dimensionOfImportanceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("motivationImportanceId")
                        .HasColumnType("int");

                    b.HasKey("motivationalDimensionOfImportanceId");

                    b.HasIndex("dimOrgDriverId");

                    b.HasIndex("dimensionOfImportanceId");

                    b.HasIndex("motivationImportanceId");

                    b.ToTable("motivationalDimensionsOfImportance", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.opExCostComponent", b =>
                {
                    b.Property<long?>("costComponentOfOpExId")
                        .HasColumnType("bigint");

                    b.Property<long?>("costComponentRefId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("componentCost")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("costComponentOfOpExId", "costComponentRefId");

                    b.HasIndex("costComponentRefId");

                    b.ToTable("opExCostComponents", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.operationalExpenditure", b =>
                {
                    b.Property<long>("operationalExpenditureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("operationalExpenditureId"));

                    b.Property<decimal?>("opExAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<long?>("opExAssetId")
                        .HasColumnType("bigint");

                    b.Property<string>("opExCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<long?>("opExDriverId")
                        .HasColumnType("bigint");

                    b.Property<int?>("opExFrequencyID")
                        .HasColumnType("int");

                    b.Property<int?>("operationalExpenditureTypeId")
                        .HasColumnType("int");

                    b.HasKey("operationalExpenditureId");

                    b.HasIndex("opExAssetId");

                    b.HasIndex("opExDriverId");

                    b.HasIndex("opExFrequencyID");

                    b.HasIndex("operationalExpenditureTypeId");

                    b.ToTable("operationalExpenditures", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgActor", b =>
                {
                    b.Property<long>("orgActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgActorId"));

                    b.Property<string>("actorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("actorIdentityDomain")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("actorTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("mailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("middleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("uniqueId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("orgActorId");

                    b.HasIndex("actorTypeId");

                    b.ToTable("orgActors", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", b =>
                {
                    b.Property<long>("orgDeliverableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgDeliverableId"));

                    b.Property<string>("deliverableDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deliverableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("deliverableTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("parentDeliverableId")
                        .HasColumnType("bigint");

                    b.HasKey("orgDeliverableId");

                    b.HasIndex("deliverableTypeId");

                    b.HasIndex("parentDeliverableId");

                    b.ToTable("orgDeliverables", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgDriver", b =>
                {
                    b.Property<long>("orgDriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgDriverId"));

                    b.Property<DateTime?>("actualEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("actualStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("approvedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("createdOn")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("driverTypeID")
                        .HasColumnType("int");

                    b.Property<string>("odDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("odName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("parentOrgDriverId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("plannedEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("plannedStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ppImplicationId")
                        .HasColumnType("int");

                    b.HasKey("orgDriverId");

                    b.HasIndex("driverTypeID");

                    b.HasIndex("parentOrgDriverId");

                    b.HasIndex("ppImplicationId");

                    b.ToTable("orgDrivers", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgGoal", b =>
                {
                    b.Property<long>("orgGoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgGoalId"));

                    b.Property<DateTime?>("achievedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("goalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("goalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("orgGoalTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("parentGoalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("plannedFor")
                        .HasColumnType("datetime2");

                    b.HasKey("orgGoalId");

                    b.HasIndex("orgGoalTypeId");

                    b.HasIndex("parentGoalId");

                    b.ToTable("orgGoals", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgGroup", b =>
                {
                    b.Property<long>("orgGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgGroupId"));

                    b.Property<string>("groupPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("orgGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("orgStructId")
                        .HasColumnType("bigint");

                    b.HasKey("orgGroupId");

                    b.HasIndex("orgStructId");

                    b.ToTable("orgGroups", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgLocation", b =>
                {
                    b.Property<long>("orgLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgLocationId"));

                    b.Property<string>("blockNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("buildingName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("countryAlpha3")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("locJurisdiction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("locRegion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("locationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("officeNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("orgAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("roadNameNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("sameAsParent")
                        .HasColumnType("bit");

                    b.Property<string>("stateName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("streetNameNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("webSite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("orgLocationId");

                    b.ToTable("orgLocations", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgMilestone", b =>
                {
                    b.Property<long>("orgMilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgMilestoneId"));

                    b.Property<DateTime?>("achievedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("contributionPercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("milestoneDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("milestoneName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("milestoneSequence")
                        .HasColumnType("int");

                    b.Property<long?>("parentMilestoneId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("plannedFor")
                        .HasColumnType("datetime2");

                    b.HasKey("orgMilestoneId");

                    b.HasIndex("parentMilestoneId");

                    b.ToTable("orgMilestones", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgRole", b =>
                {
                    b.Property<long>("orgRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgRoleId"));

                    b.Property<long?>("parentRoleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("roleRankId")
                        .HasColumnType("int");

                    b.Property<int?>("vitalityIndicatorId")
                        .HasColumnType("int");

                    b.HasKey("orgRoleId");

                    b.HasIndex("parentRoleId");

                    b.HasIndex("roleRankId");

                    b.HasIndex("vitalityIndicatorId");

                    b.ToTable("orgRoles", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgStructure", b =>
                {
                    b.Property<long>("orgStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("orgStructureId"));

                    b.Property<int?>("commercialStatusId")
                        .HasColumnType("int");

                    b.Property<long?>("locationId")
                        .HasColumnType("bigint");

                    b.Property<string>("orgName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("orgTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("parentOrgId")
                        .HasColumnType("bigint");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("workingStatusId")
                        .HasColumnType("int");

                    b.HasKey("orgStructureId");

                    b.HasIndex("commercialStatusId");

                    b.HasIndex("locationId");

                    b.HasIndex("orgTypeId");

                    b.HasIndex("parentOrgId");

                    b.HasIndex("workingStatusId");

                    b.ToTable("orgStructures", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.procurementDetail", b =>
                {
                    b.Property<long>("procurementDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("procurementDetailId"));

                    b.Property<long?>("procurementAlertId")
                        .HasColumnType("bigint");

                    b.Property<int?>("procurementPhaseId")
                        .HasColumnType("int");

                    b.Property<string>("procurementRealizationRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("procurementSourceRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("procurementSubjectAssetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("procurementSubjectDriverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("procurementSubjectMilestoneId")
                        .HasColumnType("bigint");

                    b.Property<int>("procurementTypeRefId")
                        .HasColumnType("int");

                    b.HasKey("procurementDetailId");

                    b.HasIndex("procurementAlertId");

                    b.HasIndex("procurementPhaseId");

                    b.HasIndex("procurementSubjectAssetId");

                    b.HasIndex("procurementSubjectDriverId");

                    b.HasIndex("procurementSubjectMilestoneId");

                    b.HasIndex("procurementTypeRefId");

                    b.ToTable("procurementDetails", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.procurementDoc", b =>
                {
                    b.Property<long>("procurementDocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("procurementDocId"));

                    b.Property<string>("procurementDocLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("procurementDocName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("procurementDocNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("procurementDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("refProcurementDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("procurementDocId");

                    b.HasIndex("procurementDocumentTypeId");

                    b.HasIndex("refProcurementDetailId");

                    b.ToTable("procurementDocs", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.serviceLevel", b =>
                {
                    b.Property<long>("serviceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("serviceLevelId"));

                    b.Property<decimal?>("maxResolutionTime")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("maxResolutionTimeUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("maxResponseTime")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("maxResponseTimeUnitId")
                        .HasColumnType("int");

                    b.Property<long?>("parentServiceLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("serviceEsclationModelGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("serviceEsclationModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("serviceLevelForAssetId")
                        .HasColumnType("bigint");

                    b.Property<int?>("serviceLevelForAssetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("serviceLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("serviceLevelSeverity")
                        .HasColumnType("int");

                    b.HasKey("serviceLevelId");

                    b.HasIndex("maxResolutionTimeUnitId");

                    b.HasIndex("maxResponseTimeUnitId");

                    b.HasIndex("parentServiceLevelId");

                    b.HasIndex("serviceEsclationModelGroupId")
                        .IsUnique()
                        .HasFilter("[serviceEsclationModelGroupId] IS NOT NULL");

                    b.HasIndex("serviceEsclationModelId")
                        .IsUnique()
                        .HasFilter("[serviceEsclationModelId] IS NOT NULL");

                    b.HasIndex("serviceLevelForAssetId");

                    b.HasIndex("serviceLevelForAssetTypeId");

                    b.ToTable("serviceLevels", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.skillParam", b =>
                {
                    b.Property<long>("skillParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("skillParamId"));

                    b.Property<int?>("competencyLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("expPredicateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("expValue")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("skillId")
                        .HasColumnType("int");

                    b.Property<int?>("skillTypeId")
                        .HasColumnType("int");

                    b.HasKey("skillParamId");

                    b.HasIndex("competencyLevelId");

                    b.HasIndex("expPredicateId");

                    b.HasIndex("skillId");

                    b.HasIndex("skillTypeId");

                    b.ToTable("skillParams", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.userCredential", b =>
                {
                    b.Property<long>("userCredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("userCredentialId"));

                    b.Property<DateTime?>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isIntegratedLogin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("passwordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("passwordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("securityAnswer")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("securityQuestionId")
                        .HasColumnType("int");

                    b.HasKey("userCredentialId");

                    b.HasIndex("securityQuestionId");

                    b.ToTable("userCredentials", "Portfolio");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.MasterData.mdPaymentInstrument", b =>
                {
                    b.Property<int>("mdPaymentInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdPaymentInstrumentId"));

                    b.Property<string>("paymentInstrumentName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("mdPaymentInstrumentId");

                    b.ToTable("mdPaymentInstruments", "VehiclesMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectCostComponentBudget", b =>
                {
                    b.Property<long>("asnBudgetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnCostComponentId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnBudgetId", "asnCostComponentId");

                    b.HasIndex("asnCostComponentId");

                    b.ToTable("asnProjectCostComponentBudgets", "VehiclesASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectOriginMaster", b =>
                {
                    b.Property<long?>("asnProjectMasterId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnProjectOriginId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnProjectMasterId", "asnProjectOriginId");

                    b.HasIndex("asnProjectOriginId");

                    b.ToTable("asnProjectOriginsMaster", "VehiclesASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectOutput", b =>
                {
                    b.Property<long>("asnProjectOutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnProjectOutputId"));

                    b.Property<long?>("asnProjectDeliverableId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnProjectGoalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnProjectMasterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnProjectMilestoneId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("deliveryContributionToMilestone")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("milestoneContributionToProject")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("projectContributionToGoal")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("asnProjectOutputId");

                    b.HasIndex("asnProjectDeliverableId");

                    b.HasIndex("asnProjectGoalId");

                    b.HasIndex("asnProjectMilestoneId");

                    b.HasIndex("asnProjectMasterId", "asnProjectGoalId", "asnProjectMilestoneId", "asnProjectDeliverableId");

                    b.ToTable("asnProjectOutputs", "VehiclesASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectStakeholder", b =>
                {
                    b.Property<long>("asnProjectStakeholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnProjectStakeholderId"));

                    b.Property<long?>("asnStakeOrgGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnStakeOrgRoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnStakeOrgStructureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("asnStakeProjectMasterId")
                        .HasColumnType("bigint");

                    b.Property<int?>("asnStakeTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnProjectStakeholderId");

                    b.HasIndex("asnStakeOrgGroupId");

                    b.HasIndex("asnStakeOrgRoleId");

                    b.HasIndex("asnStakeOrgStructureId");

                    b.HasIndex("asnStakeTypeId");

                    b.HasIndex("asnStakeProjectMasterId", "asnStakeOrgStructureId", "asnStakeOrgGroupId", "asnStakeOrgRoleId");

                    b.ToTable("asnProjectStakeholders", "VehiclesASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.paymentRecord", b =>
                {
                    b.Property<long>("paymentRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("paymentRecordId"));

                    b.Property<DateTime?>("invoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("invoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("paymentInstrumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("paymentReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("paymentReceiptNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("paymentRecordInstrumentId")
                        .HasColumnType("int");

                    b.Property<long?>("paymentRecordProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("paymentRecordId");

                    b.HasIndex("paymentRecordInstrumentId");

                    b.HasIndex("paymentRecordProjectId");

                    b.ToTable("paymentRecords", "Vehicles");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.paymentSchedule", b =>
                {
                    b.Property<long>("paymentScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("paymentScheduleId"));

                    b.Property<decimal?>("paymentAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("paymentPercentage")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<long?>("paymentScheduleProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("plannedPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("scheduleRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("paymentScheduleId");

                    b.HasIndex("paymentScheduleProjectId");

                    b.ToTable("paymentSchedules", "Vehicles");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectBudget", b =>
                {
                    b.Property<long>("projectBudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("projectBudgetId"));

                    b.Property<decimal?>("budgetAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<long?>("budgetCostCenterId")
                        .HasColumnType("bigint");

                    b.Property<string>("budgetDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("budgetName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("currencyAlpha3")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("projectBudgetId");

                    b.HasIndex("budgetCostCenterId");

                    b.ToTable("projectBudgets", "Vehicles");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectCostCenter", b =>
                {
                    b.Property<long>("projectCostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("projectCostCenterId"));

                    b.Property<long?>("costCenterProjectMasterId")
                        .HasColumnType("bigint");

                    b.HasKey("projectCostCenterId");

                    b.HasIndex("costCenterProjectMasterId");

                    b.ToTable("projectCostCenter", "Vehicles");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectCostComponent", b =>
                {
                    b.Property<long>("projectCostComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("projectCostComponentId"));

                    b.Property<long?>("costComponentRefId")
                        .HasColumnType("bigint");

                    b.HasKey("projectCostComponentId");

                    b.HasIndex("costComponentRefId");

                    b.ToTable("projectCostComponents", "Vehicles");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectMaster", b =>
                {
                    b.Property<long>("projectMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("projectMasterId"));

                    b.Property<DateTime?>("actualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("actualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("plannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("plannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("projectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("projectMasterId");

                    b.ToTable("projectMaster", "Vehicles");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectOrigin", b =>
                {
                    b.Property<long>("projectOriginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("projectOriginId"));

                    b.Property<long?>("projectOriginDriverId")
                        .HasColumnType("bigint");

                    b.Property<long?>("projectOriginGoalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("projectOriginMilestoneId")
                        .HasColumnType("bigint");

                    b.HasKey("projectOriginId");

                    b.HasIndex("projectOriginDriverId");

                    b.HasIndex("projectOriginGoalId");

                    b.HasIndex("projectOriginMilestoneId");

                    b.ToTable("projectOrigins", "Vehicles");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdGovernanceComplianceLevel", b =>
                {
                    b.Property<int>("mdGovernanceComplianceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdGovernanceComplianceLevelId"));

                    b.Property<string>("compLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("rank")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("mdGovernanceComplianceLevelId");

                    b.ToTable("mdGovernanceComplianceLevels", "GovernanceMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdPPImplication", b =>
                {
                    b.Property<int>("mdPPImplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdPPImplicationId"));

                    b.Property<string>("implicationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("implicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mdPPImplicationId");

                    b.ToTable("mdPPImplications", "GovernanceMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdPolicyPrinciple", b =>
                {
                    b.Property<long>("mdPolicyPrincipleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("mdPolicyPrincipleId"));

                    b.Property<byte[]>("policyPrincipleDocument")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("policyPrincipleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("policyPrincipleRationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("policyPrincipleStatement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mdPolicyPrincipleId");

                    b.ToTable("mdPoliciesPrinciples", "GovernanceMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdStandardAttachment", b =>
                {
                    b.Property<long>("mdStandardAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("mdStandardAttachmentId"));

                    b.Property<byte[]>("attachmentContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("attachmentOfStandardId")
                        .HasColumnType("int");

                    b.Property<string>("attachmentTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("mdStandardAttachmentId");

                    b.HasIndex("attachmentOfStandardId");

                    b.ToTable("mdStandardAttachments", "GovernanceMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdStandardGuideline", b =>
                {
                    b.Property<int>("mdStandardGuidelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdStandardGuidelineId"));

                    b.Property<string>("resourceLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("standardGuidelineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mdStandardGuidelineId");

                    b.ToTable("mdStandardsGuidelines", "GovernanceMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnDispensationApproval", b =>
                {
                    b.Property<long>("asnDispensationApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnDispensationApprovalId"));

                    b.Property<DateTime?>("dispensationApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("dispensationApprovalStructureId")
                        .HasColumnType("bigint");

                    b.Property<string>("dispensationApproverSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("dispensationAprovalGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("dispensationAprovalRoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("dispensationForApprovalAsnId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnDispensationApprovalId");

                    b.HasIndex("dispensationAprovalGroupId");

                    b.HasIndex("dispensationAprovalRoleId");

                    b.HasIndex("dispensationForApprovalAsnId");

                    b.HasIndex("dispensationApprovalStructureId", "dispensationAprovalGroupId", "dispensationAprovalRoleId");

                    b.ToTable("asnDispensationApprovals", "GovernanceASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnDispensationRequestor", b =>
                {
                    b.Property<long>("asnDispensationRequestorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnDispensationRequestorId"));

                    b.Property<long>("dispensationOfRequestorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("dispensationRequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("dispensationRequestorGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("dispensationRequestorRoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("dispensationRequestorStructureId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnDispensationRequestorId");

                    b.HasIndex("dispensationOfRequestorId");

                    b.HasIndex("dispensationRequestorGroupId");

                    b.HasIndex("dispensationRequestorRoleId");

                    b.HasIndex("dispensationRequestorStructureId", "dispensationRequestorGroupId", "dispensationRequestorRoleId");

                    b.ToTable("asnDispensationRequestors", "GovernanceASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnGovernedEntityStandard", b =>
                {
                    b.Property<long>("asnGovernedEntityStandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("asnGovernedEntityStandardId"));

                    b.Property<long?>("asnGovernedEntityId")
                        .HasColumnType("bigint");

                    b.Property<int?>("asnGoverningStandardId")
                        .HasColumnType("int");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<int?>("requiredComplianceId")
                        .HasColumnType("int");

                    b.HasKey("asnGovernedEntityStandardId");

                    b.HasIndex("asnGovernedEntityId");

                    b.HasIndex("requiredComplianceId");

                    b.HasIndex("asnGoverningStandardId", "requiredComplianceId");

                    b.ToTable("asnGovernedEntityStandards", "GovernanceASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnGovernedGoverning", b =>
                {
                    b.Property<long>("asnGovernedEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnGoverningEntityId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnGovernedEntityId", "asnGoverningEntityId");

                    b.HasIndex("asnGoverningEntityId");

                    b.ToTable("asnGovernedGovernings", "GovernanceASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnGoverningEntityLog", b =>
                {
                    b.Property<long>("asnGovernanceLogId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnGoverningEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("governingEntitySignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnGovernanceLogId", "asnGoverningEntityId");

                    b.HasIndex("asnGoverningEntityId");

                    b.ToTable("asnGoverningEntityLogs", "GovernanceASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.dispensationRecord", b =>
                {
                    b.Property<long>("dispensationRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("dispensationRecordId"));

                    b.Property<long?>("postGovernanceDispensationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("preGovernanceDispensationId")
                        .HasColumnType("bigint");

                    b.HasKey("dispensationRecordId");

                    b.HasIndex("postGovernanceDispensationId");

                    b.HasIndex("preGovernanceDispensationId");

                    b.ToTable("dispensationRecords", "Governance");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceAttachment", b =>
                {
                    b.Property<long>("governanceAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("governanceAttachmentId"));

                    b.Property<byte[]>("attachmentContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("governanceAttachmentForOutputId")
                        .HasColumnType("bigint");

                    b.HasKey("governanceAttachmentId");

                    b.HasIndex("governanceAttachmentForOutputId");

                    b.ToTable("governanceAttachments", "Governance");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceLog", b =>
                {
                    b.Property<long>("governanceLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("governanceLogId"));

                    b.Property<DateTime?>("governanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("governanceRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("governanceResultId")
                        .HasColumnType("int");

                    b.Property<long?>("governanceSubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("governanceLogId");

                    b.HasIndex("governanceResultId");

                    b.HasIndex("governanceSubjectId");

                    b.ToTable("governanceLogs", "Governance");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceOutput", b =>
                {
                    b.Property<long>("governanceOutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("governanceOutputId"));

                    b.Property<long?>("governanceOutputLogId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("outPutCreationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("governanceOutputId");

                    b.HasIndex("governanceOutputLogId");

                    b.ToTable("governanceOutputs", "Governance");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governedEntity", b =>
                {
                    b.Property<long>("governedEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("governedEntityId"));

                    b.Property<string>("entityRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("governedEntityDeliverableId")
                        .HasColumnType("bigint");

                    b.Property<long?>("governedEntityProcurementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("governedEntityProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("parentGovernedEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("governedEntityId");

                    b.HasIndex("governedEntityDeliverableId");

                    b.HasIndex("governedEntityProcurementId");

                    b.HasIndex("governedEntityProjectId");

                    b.HasIndex("parentGovernedEntityId");

                    b.ToTable("governedEntities", "Governance");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governingEntity", b =>
                {
                    b.Property<long>("governingEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("governingEntityId"));

                    b.Property<long?>("governingEntityGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("governingEntityRoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("governingEntityStructureId")
                        .HasColumnType("bigint");

                    b.Property<string>("governingRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("governingEntityId");

                    b.HasIndex("governingEntityGroupId");

                    b.HasIndex("governingEntityRoleId");

                    b.HasIndex("governingEntityStructureId");

                    b.ToTable("governingEntities", "Governance");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdAstraFieldType", b =>
                {
                    b.Property<int>("mdAstraFieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdAstraFieldTypeId"));

                    b.Property<string>("codeFieldTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dbFieldTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("maxLength")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("mdAstraFieldTypeId");

                    b.ToTable("mdAstraFieldTypes", "astraSYSMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdDataSource", b =>
                {
                    b.Property<int>("mdDataSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdDataSourceId"));

                    b.Property<string>("dataSourceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isPersisted")
                        .HasColumnType("bit");

                    b.HasKey("mdDataSourceId");

                    b.ToTable("mdDataSources", "astraSYSMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdDataSourceAccessType", b =>
                {
                    b.Property<int>("mdDataSourceAccessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdDataSourceAccessTypeId"));

                    b.Property<string>("dataSourceAccessTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("dataSourceRefDoc")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("mdDataSourceAccessTypeId");

                    b.ToTable("mdDataSourceAccessTypes", "astraSYSMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdDataSourcePriority", b =>
                {
                    b.Property<int>("mdDataSourcePriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdDataSourcePriorityId"));

                    b.Property<string>("priorityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("priorityOrder")
                        .HasColumnType("int");

                    b.HasKey("mdDataSourcePriorityId");

                    b.ToTable("mdDataSourcePriorities", "astraSYSMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdInformationSchema", b =>
                {
                    b.Property<int>("mdInformationSchemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mdInformationSchemaId"));

                    b.Property<string>("informationSchemaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mdInformationSchemaId");

                    b.ToTable("mdInfomationSchemas", "astraSYSASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.asnDataSourceAccessType", b =>
                {
                    b.Property<int>("asnDataSourceAccessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("asnDataSourceAccessTypeId"));

                    b.Property<int>("asnAccessTypeId")
                        .HasColumnType("int");

                    b.Property<int>("asnDataSourceId")
                        .HasColumnType("int");

                    b.Property<int>("asnDataSourcePriorityId")
                        .HasColumnType("int");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnDataSourceAccessTypeId");

                    b.HasIndex("asnAccessTypeId");

                    b.HasIndex("asnDataSourceId");

                    b.HasIndex("asnDataSourcePriorityId");

                    b.ToTable("asnDataSourceAccessTypes", "astraSYSASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.asnEnterpriseElementDataSource", b =>
                {
                    b.Property<int>("asnDataSourceId")
                        .HasColumnType("int");

                    b.Property<long>("asnEnterpriseElementId")
                        .HasColumnType("bigint");

                    b.HasKey("asnDataSourceId", "asnEnterpriseElementId");

                    b.HasIndex("asnEnterpriseElementId");

                    b.ToTable("asnEnterpriseElementsDataSources", "astraSYSASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.asnInformationObjectEnterpriseElement", b =>
                {
                    b.Property<long>("asnEnterpriseElementId")
                        .HasColumnType("bigint");

                    b.Property<long>("asnInformationObjectId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("asnEnterpriseElementId", "asnInformationObjectId");

                    b.HasIndex("asnInformationObjectId");

                    b.ToTable("asnInformationObjectEnterpriseElements", "astraSYSASNS");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.astraEnterpriseElement", b =>
                {
                    b.Property<long>("astraEnterpriseElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("astraEnterpriseElementId"));

                    b.Property<string>("dataEntityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataEntityLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("dataEntityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("astraEnterpriseElementId");

                    b.ToTable("astraEnterpriseElements", "astraSYS");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.astraInformationObject", b =>
                {
                    b.Property<long>("astraInformationObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("astraInformationObjectId"));

                    b.Property<string>("informationObjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("informationObjectLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("informationObjectName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("informationSchemaId")
                        .HasColumnType("int");

                    b.HasKey("astraInformationObjectId");

                    b.HasIndex("informationSchemaId");

                    b.ToTable("astraInformationObjects", "astraSYS");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.informationObjectField", b =>
                {
                    b.Property<long>("informationObjectFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("informationObjectFieldId"));

                    b.Property<string>("fieldDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fieldLabel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("fieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("fieldTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("informationObjectRefId")
                        .HasColumnType("bigint");

                    b.HasKey("informationObjectFieldId");

                    b.HasIndex("fieldTypeId");

                    b.HasIndex("informationObjectRefId");

                    b.ToTable("informationObjectFields", "astraSYS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdActorType", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdActorType", "parentActorType")
                        .WithMany("childActorTypes")
                        .HasForeignKey("parentActorTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentActorType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", "parentAsset")
                        .WithMany("childAssetTypes")
                        .HasForeignKey("parentAssetID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentAsset");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthAccessLevel", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthorityLevel", "_authorityLevel")
                        .WithMany("authorityAccessLevels")
                        .HasForeignKey("authorityLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCumulativeStakeCap", "MdCumulativeStakeCap")
                        .WithOne("MdAuthAccessLevel")
                        .HasForeignKey("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthAccessLevel", "stakeThreshold")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MdCumulativeStakeCap");

                    b.Navigation("_authorityLevel");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCapacityMesaurementUnit", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refTimeUnit", "timeUnit")
                        .WithMany("capacityMeasurementUnits")
                        .HasForeignKey("outOf")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("timeUnit");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdDriverType", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdDriverType", "parentDriverType")
                        .WithMany("childDriverTypes")
                        .HasForeignKey("parentDriverTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentDriverType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdManagementMethod", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdManagementMethod", "parentMethod")
                        .WithMany("childMethods")
                        .HasForeignKey("parentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentMethod");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPhase", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdManagementMethod", "managementMethod")
                        .WithMany("phases")
                        .HasForeignKey("ManagementmethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("managementMethod");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refDeliverable", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", "deliverableType")
                        .WithMany("refDeliverableTypes")
                        .HasForeignKey("deliverableTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("deliverableType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", "parentJob")
                        .WithMany("childJobs")
                        .HasForeignKey("parentJobId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentJob");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRole", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRoleContext", "roleContext")
                        .WithMany("roles")
                        .HasForeignKey("roleContextId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdRoleType", "roleType")
                        .WithMany("roles")
                        .HasForeignKey("roleTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("roleContext");

                    b.Navigation("roleType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refSkill", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refSkill", "parentSkill")
                        .WithMany("childSkills")
                        .HasForeignKey("parentSkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentSkill");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.alertService", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdFrequency", "alertFrequency")
                        .WithMany("alertServicesFrequency")
                        .HasForeignKey("alertFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refTimeUnit", "alertInterval")
                        .WithMany("alertServicesTimeUnit")
                        .HasForeignKey("alertIntervalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("alertFrequency");

                    b.Navigation("alertInterval");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnActorRole", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgActor", "asnOrgActor")
                        .WithMany("actorOfRoles")
                        .HasForeignKey("asnOrgActorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "asnOrgRole")
                        .WithMany("roleOfActors")
                        .HasForeignKey("asnOrgRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("asnOrgActor");

                    b.Navigation("asnOrgRole");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnActorSkill", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgActor", "asnOrgActor")
                        .WithMany("orgActorSkillsAsn")
                        .HasForeignKey("asnOrgActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.skillParam", "asnSkillParam")
                        .WithMany("skillParamsAsn")
                        .HasForeignKey("asnSkillParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnOrgActor");

                    b.Navigation("asnSkillParam");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnGroupJob", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "asnGroupJoborgGroup")
                        .WithMany("GroupJobsAsn")
                        .HasForeignKey("asnGroupJoborgGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", "asnGroupRefJob")
                        .WithMany("asnGroupJobs")
                        .HasForeignKey("asnGroupRefJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnGroupJoborgGroup");

                    b.Navigation("asnGroupRefJob");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnGroupRole", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "asnOrgGroup")
                        .WithMany("orgGroupRoleAsn")
                        .HasForeignKey("asnOrgGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "asnOrgRole")
                        .WithMany("orgRoleGroupsAsn")
                        .HasForeignKey("asnOrgRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnOrgGroup");

                    b.Navigation("asnOrgRole");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnGroupSkill", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "asnOrgGroup")
                        .WithMany("GroupSkillsAsn")
                        .HasForeignKey("asnOrgGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.skillParam", "asnSkillParam")
                        .WithMany("groupSkillsAsn")
                        .HasForeignKey("asnSkillParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnOrgGroup");

                    b.Navigation("asnSkillParam");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnIncidentEscalationRoleGroup", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "asnIncidentEsclationGroup")
                        .WithMany("groupIncidentEsclationAsn")
                        .HasForeignKey("asnIncidentEsclationGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "asnIncidentEsclationRole")
                        .WithMany("asnIncidentEscalationRoles")
                        .HasForeignKey("asnIncidentEsclationRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.incidentEsclationModel", "asnIncidentEsclationlLevel")
                        .WithMany("incidentEsclationLevelRoleAsn")
                        .HasForeignKey("asnIncidentEsclationlLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("asnIncidentEsclationGroup");

                    b.Navigation("asnIncidentEsclationRole");

                    b.Navigation("asnIncidentEsclationlLevel");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnJobAssetAuth", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", "asnAssetAuthRefJob")
                        .WithMany("asnJobAssetAuths")
                        .HasForeignKey("asnAssetAuthRefJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "asnAssetPortfolio")
                        .WithMany("asnJobAssetAuths")
                        .HasForeignKey("asnAssetPortfolioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthAccessLevel", "asnAuthAccessLevel")
                        .WithMany("mdJobAssetAuths")
                        .HasForeignKey("asnAuthAccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnAssetAuthRefJob");

                    b.Navigation("asnAssetPortfolio");

                    b.Navigation("asnAuthAccessLevel");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnJobDeliverable", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", "asnDeliverable")
                        .WithMany("asnOrgDeliverables")
                        .HasForeignKey("asnDeliverableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", "asnJob")
                        .WithMany("asnJobDeliverableJobs")
                        .HasForeignKey("asnJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnDeliverable");

                    b.Navigation("asnJob");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnMotivational", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", "asnDeliverable")
                        .WithMany("asnMotivationalDeliverables")
                        .HasForeignKey("asnDeliverableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGoal", "asnGoal")
                        .WithMany("asnMotivationalGoals")
                        .HasForeignKey("asnGoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgMilestone", "asnMilestone")
                        .WithMany("asnMotivationalMilestones")
                        .HasForeignKey("asnMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", "asnOperation")
                        .WithMany("asnMotivationalJobs")
                        .HasForeignKey("asnOperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDriver", "asnOrgDriver")
                        .WithMany("asnMotivationalDrivers")
                        .HasForeignKey("asnOrgDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "asnOrgStructure")
                        .WithMany("asnMotivationalStructures")
                        .HasForeignKey("asnOrgStructureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "thisPriority")
                        .WithMany("asnMotivationalPriorities")
                        .HasForeignKey("thisPriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("asnDeliverable");

                    b.Navigation("asnGoal");

                    b.Navigation("asnMilestone");

                    b.Navigation("asnOperation");

                    b.Navigation("asnOrgDriver");

                    b.Navigation("asnOrgStructure");

                    b.Navigation("thisPriority");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnMotivationalRole", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthorityLevel", "asnAuthorityLevel")
                        .WithMany("asnMotivationalRoleAuthorityAccessLevels")
                        .HasForeignKey("asnAuthorityLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.asnMotivational", "refAsnMotivational")
                        .WithMany("refAsnMotivationalRoles")
                        .HasForeignKey("refAsnMotivationalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "stakeholderGroup")
                        .WithMany("asnMotivationalRoleGroups")
                        .HasForeignKey("stakeholderGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRole", "stakeholderRole")
                        .WithMany("asnMotivationalRoleRoles")
                        .HasForeignKey("stakeholderRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdStake", "stakeholderType")
                        .WithMany("asnMotivationalRoleStakeholderTypes")
                        .HasForeignKey("stakeholderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnAuthorityLevel");

                    b.Navigation("refAsnMotivational");

                    b.Navigation("stakeholderGroup");

                    b.Navigation("stakeholderRole");

                    b.Navigation("stakeholderType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnMotivationalSkill", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.skillParam", "asnSkillParam")
                        .WithMany("asnMotivationalSkillParams")
                        .HasForeignKey("asnSkillParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.asnMotivational", "refAsnMotivational")
                        .WithMany("refAsnMotivationalSkills")
                        .HasForeignKey("refAsnMotivationalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnSkillParam");

                    b.Navigation("refAsnMotivational");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnRoleJob", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", "asnJob")
                        .WithMany("asnRoleJobJobs")
                        .HasForeignKey("asnJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRole", "asnRole")
                        .WithMany("asnRoleJobRoles")
                        .HasForeignKey("asnRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnJob");

                    b.Navigation("asnRole");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnRoleSkill", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRole", "asnRole")
                        .WithMany("asnRoleSkillsRole")
                        .HasForeignKey("asnRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.skillParam", "asnSkillParam")
                        .WithMany("asnRoleSkills")
                        .HasForeignKey("asnSkillParamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnRole");

                    b.Navigation("asnSkillParam");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.assetCapacityUtilizationRecord", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "assetRecord")
                        .WithMany("capacityUtilizationRecords")
                        .HasForeignKey("assetRecordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("assetRecord");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.assetComplexRelationAnalysis", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "assetBuildingBlock")
                        .WithMany("assetComplexRelationBuildingBlocks")
                        .HasForeignKey("assetBuildingBlockId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdImpact", "buildingBlockNonAvailabilityImpact")
                        .WithMany("buildingBlockNonAvailabilityImpacts")
                        .HasForeignKey("buildingBlockNonAvailabilityImpactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "buildingBlockVitality")
                        .WithMany("assetComplexRelationVitalities")
                        .HasForeignKey("buildingBlockVitalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "fulfillmentWeightage")
                        .WithMany("assetComplexRelationfulfillmentWeightages")
                        .HasForeignKey("fulfillmentWeightageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "sourceAsset")
                        .WithMany("assetComplexRelationSourceAssets")
                        .HasForeignKey("sourceAssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("assetBuildingBlock");

                    b.Navigation("buildingBlockNonAvailabilityImpact");

                    b.Navigation("buildingBlockVitality");

                    b.Navigation("fulfillmentWeightage");

                    b.Navigation("sourceAsset");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.capacityDesign", "assetCapacityDesign")
                        .WithOne("assetPortfolioCapacity")
                        .HasForeignKey("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "assetCapacityDesignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetCategory", "assetCategory")
                        .WithMany("assetPortfolioCategory")
                        .HasForeignKey("assetCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdComplexity", "assetComplexity")
                        .WithMany("assetComplexities")
                        .HasForeignKey("assetComplexityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "assetManager")
                        .WithMany("assetPortfolioOrgStructureManager")
                        .HasForeignKey("assetManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "assetOwner")
                        .WithMany("assetPortfolioOrgStructureOwner")
                        .HasForeignKey("assetOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPortfolioCategory", "assetPortfolioCategory")
                        .WithMany("assetPortfolioCategories")
                        .HasForeignKey("assetPortfolioCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPhase", "assetStatus")
                        .WithMany("assetPortfolioPhase")
                        .HasForeignKey("assetStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", "assetType")
                        .WithMany("assetPortfolioAssetTypes")
                        .HasForeignKey("assetTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "assetVolume")
                        .WithMany("assetPortfolioGeneralSaclesVol")
                        .HasForeignKey("assetVolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdImpact", "cumulativeDependencyImpact")
                        .WithMany("assetPortfolioDependencyImpacts")
                        .HasForeignKey("cumulativeDependencyImpactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "cumulativeVitalityIndicator")
                        .WithMany("assetPortfolioGeneralSaclesCVI")
                        .HasForeignKey("cumulativeVitalityIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "parentAsset")
                        .WithMany("childAssets")
                        .HasForeignKey("parentAssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdFrequency", "utilizationMonitorFrequency")
                        .WithMany("assetPortfolioFrequeny")
                        .HasForeignKey("utilizationMonitorFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("assetCapacityDesign");

                    b.Navigation("assetCategory");

                    b.Navigation("assetComplexity");

                    b.Navigation("assetManager");

                    b.Navigation("assetOwner");

                    b.Navigation("assetPortfolioCategory");

                    b.Navigation("assetStatus");

                    b.Navigation("assetType");

                    b.Navigation("assetVolume");

                    b.Navigation("cumulativeDependencyImpact");

                    b.Navigation("cumulativeVitalityIndicator");

                    b.Navigation("parentAsset");

                    b.Navigation("utilizationMonitorFrequency");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.astraHistory", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgActor", "actionByActor")
                        .WithMany("actorsHistory")
                        .HasForeignKey("actionByActorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "actionByGroup")
                        .WithMany("groupsHistory")
                        .HasForeignKey("actionByGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "actionByRole")
                        .WithMany("rolesHistory")
                        .HasForeignKey("actionByRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.System.astraEnterpriseElement", "enterpriseElement")
                        .WithMany()
                        .HasForeignKey("enterpriseElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "historyAsset")
                        .WithMany("assetsHistory")
                        .HasForeignKey("historyAssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", "historyDeliverable")
                        .WithMany("deliverablesHistory")
                        .HasForeignKey("historyDeliverableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDriver", "historyDriver")
                        .WithMany("driversHistory")
                        .HasForeignKey("historyDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGoal", "historyGoal")
                        .WithMany("goalsHistory")
                        .HasForeignKey("historyGoalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgMilestone", "historyMilestone")
                        .WithMany("milestonesHistory")
                        .HasForeignKey("historyMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "historyStructure")
                        .WithMany("structuresHistory")
                        .HasForeignKey("historyStructureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("actionByActor");

                    b.Navigation("actionByGroup");

                    b.Navigation("actionByRole");

                    b.Navigation("enterpriseElement");

                    b.Navigation("historyAsset");

                    b.Navigation("historyDeliverable");

                    b.Navigation("historyDriver");

                    b.Navigation("historyGoal");

                    b.Navigation("historyMilestone");

                    b.Navigation("historyStructure");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capExCostComponent", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCostComponent", "costComponent")
                        .WithMany("refCapExCostComponents")
                        .HasForeignKey("costComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.capExDetail", "refCapExDetail")
                        .WithMany("costComponents")
                        .HasForeignKey("refCapExDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("costComponent");

                    b.Navigation("refCapExDetail");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capExDetail", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.procurementDetail", "refProcurementDetail")
                        .WithMany("capExProcurements")
                        .HasForeignKey("refProcurementDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("refProcurementDetail");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capacityDesign", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCapacityMesaurementUnit", "capacityMeasurementUnit")
                        .WithMany("capacityDesignUnits")
                        .HasForeignKey("capacityMeasurementUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("capacityMeasurementUnit");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capacitySpending", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.capacityDesign", "assetCapacitySpending")
                        .WithMany("capacityDesignSpendings")
                        .HasForeignKey("assetCapacitySpendingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCapacityMesaurementUnit", "capacitySpendingMeasurement")
                        .WithOne("capacitySpendingUnit")
                        .HasForeignKey("Astra_MK1.Model.BusinessPortfolio.capacitySpending", "capacitySpendingMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("assetCapacitySpending");

                    b.Navigation("capacitySpendingMeasurement");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.cotsProcurementDetail", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCLType", "cotsProcurementCLType")
                        .WithMany("procurementDetailsCOTS")
                        .HasForeignKey("cotsProcurementCLTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.procurementDetail", "procurementDetailRef")
                        .WithMany("refCOTS")
                        .HasForeignKey("procurementdetailRefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("cotsProcurementCLType");

                    b.Navigation("procurementDetailRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentEsclationModel", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.incidentEscalationModelGroup", "incidentEsclationGroup")
                        .WithMany("incidentEsclationModelGroups")
                        .HasForeignKey("incidentEsclationGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("incidentEsclationGroup");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementAttachment", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.incidentManagementRecord", "attachmentOfmanagementRecord")
                        .WithMany("managementRecordAttachments")
                        .HasForeignKey("attachmentOfManagementRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("attachmentOfmanagementRecord");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementRecord", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdImpact", "incidentImpact")
                        .WithMany("incidentsManagementRecordImpacts")
                        .HasForeignKey("incidentImpactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.serviceLevel", "incidementManagementRecordServiceLevel")
                        .WithMany("incidentServiceLevels")
                        .HasForeignKey("incidentManagementRecordServiceLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.incidentManagementStatus", "incidentManagementRecordStatus")
                        .WithMany("incidentManagementRecordStatuses")
                        .HasForeignKey("incidentManagementRecordStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "incidentPriority")
                        .WithMany("incidentManagementRecordsPriority")
                        .HasForeignKey("incidentPriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "incidentSubject")
                        .WithMany("assetIncidentsManagementRecord")
                        .HasForeignKey("incidentSubjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.incidentManagementRecord", "parentIncident")
                        .WithMany("childIncidentRecords")
                        .HasForeignKey("parentIncidentId");

                    b.Navigation("incidementManagementRecordServiceLevel");

                    b.Navigation("incidentImpact");

                    b.Navigation("incidentManagementRecordStatus");

                    b.Navigation("incidentPriority");

                    b.Navigation("incidentSubject");

                    b.Navigation("parentIncident");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementStatus", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "assiginedToOrgGroup")
                        .WithMany("orgGroupIncidents")
                        .HasForeignKey("assignedToOrgGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "assignedToOrgRole")
                        .WithMany("orgRoleIncidents")
                        .HasForeignKey("assignedToOrgRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "assignedToOrgStructure")
                        .WithMany("orgStructureIncidents")
                        .HasForeignKey("assignedToOrgStructureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refIncidentStatus", "incidentStatusRef")
                        .WithMany("incidentStatusesManagement")
                        .HasForeignKey("incidentStatusRefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("assiginedToOrgGroup");

                    b.Navigation("assignedToOrgRole");

                    b.Navigation("assignedToOrgStructure");

                    b.Navigation("incidentStatusRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.locPhone", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refPhoneType", "locPhoneType")
                        .WithOne("locPhone")
                        .HasForeignKey("Astra_MK1.Model.BusinessPortfolio.locPhone", "locPhoneTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgLocation", "orgLocation")
                        .WithMany("locPhones")
                        .HasForeignKey("orgLocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("locPhoneType");

                    b.Navigation("orgLocation");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.motivationalDimensionOfImportance", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDriver", "dimOrgDriver")
                        .WithMany("dimensionalImportances")
                        .HasForeignKey("dimOrgDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdMotivationalDimension", "dimensionofImportance")
                        .WithMany("motivationalDimensions")
                        .HasForeignKey("dimensionOfImportanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "motivationImportance")
                        .WithMany("motivationalDimensionImportances")
                        .HasForeignKey("motivationImportanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("dimOrgDriver");

                    b.Navigation("dimensionofImportance");

                    b.Navigation("motivationImportance");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.opExCostComponent", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.operationalExpenditure", "costComponentOfOpEx")
                        .WithMany("operationalExpenditureComponents")
                        .HasForeignKey("costComponentOfOpExId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCostComponent", "costComponentRef")
                        .WithMany("refOpExCostComponents")
                        .HasForeignKey("costComponentRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("costComponentOfOpEx");

                    b.Navigation("costComponentRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.operationalExpenditure", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "opExAsset")
                        .WithMany("assetOpExs")
                        .HasForeignKey("opExAssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDriver", "opExDriver")
                        .WithMany("driverOpExs")
                        .HasForeignKey("opExDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdFrequency", "opExFrequency")
                        .WithMany("frequenciesOpEx")
                        .HasForeignKey("opExFrequencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOpExType", "operationalExpenditureType")
                        .WithMany("opExTypeExpenditures")
                        .HasForeignKey("operationalExpenditureTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("opExAsset");

                    b.Navigation("opExDriver");

                    b.Navigation("opExFrequency");

                    b.Navigation("operationalExpenditureType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgActor", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdActorType", "actorType")
                        .WithMany("mdorgActorsTypes")
                        .HasForeignKey("actorTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("actorType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", "deliverableType")
                        .WithMany("orgDeliverableTypes")
                        .HasForeignKey("deliverableTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", "parentDeliverable")
                        .WithMany("childDeliverables")
                        .HasForeignKey("parentDeliverableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("deliverableType");

                    b.Navigation("parentDeliverable");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgDriver", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdDriverType", "driverType")
                        .WithMany("OrgDriverRefs")
                        .HasForeignKey("driverTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDriver", "parentOrgDriver")
                        .WithMany("childOrgDrivers")
                        .HasForeignKey("parentOrgDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.Governance.MasterData.mdPPImplication", "ppImplicationRef")
                        .WithMany("orgDriverRefs")
                        .HasForeignKey("ppImplicationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("driverType");

                    b.Navigation("parentOrgDriver");

                    b.Navigation("ppImplicationRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgGoal", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGoalType", "orgGoalType")
                        .WithMany("goalTypeOfGoals")
                        .HasForeignKey("orgGoalTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGoal", "parentGoal")
                        .WithMany("childGoals")
                        .HasForeignKey("parentGoalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("orgGoalType");

                    b.Navigation("parentGoal");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgGroup", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "orgStruct")
                        .WithMany("orgGroupStructures")
                        .HasForeignKey("orgStructId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("orgStruct");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgMilestone", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgMilestone", "parentMilestone")
                        .WithMany("childMilestones")
                        .HasForeignKey("parentMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentMilestone");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgRole", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "parentRole")
                        .WithMany("childRoles")
                        .HasForeignKey("parentRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRank", "roleRank")
                        .WithMany("orgRolesRank")
                        .HasForeignKey("roleRankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", "vitalityIndicator")
                        .WithMany("orgRolesGeneralScale")
                        .HasForeignKey("vitalityIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("parentRole");

                    b.Navigation("roleRank");

                    b.Navigation("vitalityIndicator");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgStructure", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOrgStatus", "commercialStatus")
                        .WithMany("orgStructuresStatus")
                        .HasForeignKey("commercialStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgLocation", "location")
                        .WithMany("orgStructures")
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOrgType", "orgType")
                        .WithMany("orgStructuresType")
                        .HasForeignKey("orgTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "parentOrg")
                        .WithMany("childOrgs")
                        .HasForeignKey("parentOrgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPhase", "workingStatus")
                        .WithMany("orgStructuresPhase")
                        .HasForeignKey("workingStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("commercialStatus");

                    b.Navigation("location");

                    b.Navigation("orgType");

                    b.Navigation("parentOrg");

                    b.Navigation("workingStatus");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.procurementDetail", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.alertService", "procurementAlert")
                        .WithMany("procurementDetailAlerts")
                        .HasForeignKey("procurementAlertId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPhase", "procurementPhase")
                        .WithMany("procurementDetailPhases")
                        .HasForeignKey("procurementPhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "procurementSubjectAsset")
                        .WithMany("procurementDetailAssets")
                        .HasForeignKey("procurementSubjectAssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDriver", "procurementSubjectDriver")
                        .WithMany("procurementDetailDrivers")
                        .HasForeignKey("procurementSubjectDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgMilestone", "procurementSubjectMilestone")
                        .WithMany("procurementDetailMilestones")
                        .HasForeignKey("procurementSubjectMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refProcurementType", "procurementTypeRef")
                        .WithMany("procurementDetailTypeRefs")
                        .HasForeignKey("procurementTypeRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("procurementAlert");

                    b.Navigation("procurementPhase");

                    b.Navigation("procurementSubjectAsset");

                    b.Navigation("procurementSubjectDriver");

                    b.Navigation("procurementSubjectMilestone");

                    b.Navigation("procurementTypeRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.procurementDoc", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refProcurementDocumentType", "procurementDocumentType")
                        .WithMany("procurementDocumentTypes")
                        .HasForeignKey("procurementDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.procurementDetail", "refProcurementDetail")
                        .WithMany("procurementDocuments")
                        .HasForeignKey("refProcurementDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("procurementDocumentType");

                    b.Navigation("refProcurementDetail");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.serviceLevel", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refTimeUnit", "maxResolutionTimeUnit")
                        .WithMany("timeUnitMaxResolution")
                        .HasForeignKey("maxResolutionTimeUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refTimeUnit", "maxResponseTimeUnit")
                        .WithMany("timeUnitMaxResponse")
                        .HasForeignKey("maxResponseTimeUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.serviceLevel", "parentServiceLevel")
                        .WithMany("childServiceLevels")
                        .HasForeignKey("parentServiceLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.incidentEscalationModelGroup", "serviceEsclationModelGroup")
                        .WithOne("esclationGroupOfServiceLevel")
                        .HasForeignKey("Astra_MK1.Model.BusinessPortfolio.serviceLevel", "serviceEsclationModelGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.incidentEsclationModel", "serviceEsclationModel")
                        .WithOne("esclationOfServiceLevel")
                        .HasForeignKey("Astra_MK1.Model.BusinessPortfolio.serviceLevel", "serviceEsclationModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", "serviceLevelForAsset")
                        .WithMany("assetServiceLevels")
                        .HasForeignKey("serviceLevelForAssetId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", "serviceLevelForAssetType")
                        .WithMany("assetTypeServiceLevels")
                        .HasForeignKey("serviceLevelForAssetTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("maxResolutionTimeUnit");

                    b.Navigation("maxResponseTimeUnit");

                    b.Navigation("parentServiceLevel");

                    b.Navigation("serviceEsclationModel");

                    b.Navigation("serviceEsclationModelGroup");

                    b.Navigation("serviceLevelForAsset");

                    b.Navigation("serviceLevelForAssetType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.skillParam", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCompetencyLevel", "competencyLevel")
                        .WithMany("skillParamsCompetencies")
                        .HasForeignKey("competencyLevelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPredicate", "expPredicate")
                        .WithMany("skillParamsPredicates")
                        .HasForeignKey("expPredicateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refSkill", "Skill")
                        .WithMany("skillParamSkills")
                        .HasForeignKey("skillId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdSkillType", "skillType")
                        .WithMany("skillParamSkillTypes")
                        .HasForeignKey("skillTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Skill");

                    b.Navigation("competencyLevel");

                    b.Navigation("expPredicate");

                    b.Navigation("skillType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.userCredential", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdSecurityQuestion", "securityQuestion")
                        .WithMany("_userCredentials")
                        .HasForeignKey("securityQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("securityQuestion");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectCostComponentBudget", b =>
                {
                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectBudget", "asnBudget")
                        .WithMany("budgetCostComponentAsns")
                        .HasForeignKey("asnBudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectCostComponent", "asnCostComponent")
                        .WithMany("costComponentBudgetAsns")
                        .HasForeignKey("asnCostComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnBudget");

                    b.Navigation("asnCostComponent");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectOriginMaster", b =>
                {
                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectMaster", "asnProjectMaster")
                        .WithMany("projectMasterOrigins")
                        .HasForeignKey("asnProjectMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectOrigin", "asnProjectOrigin")
                        .WithMany("projectOriginMasters")
                        .HasForeignKey("asnProjectOriginId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnProjectMaster");

                    b.Navigation("asnProjectOrigin");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectOutput", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", "asnProjectDeliverable")
                        .WithMany("deliverablesOfProjectMilestones")
                        .HasForeignKey("asnProjectDeliverableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGoal", "asnProjectGoal")
                        .WithMany("goalsOfProjects")
                        .HasForeignKey("asnProjectGoalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectMaster", "asnProjectMaster")
                        .WithMany("projectOutputs")
                        .HasForeignKey("asnProjectMasterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgMilestone", "asnProjectMilestone")
                        .WithMany("milestonesOfProjectGoals")
                        .HasForeignKey("asnProjectMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("asnProjectDeliverable");

                    b.Navigation("asnProjectGoal");

                    b.Navigation("asnProjectMaster");

                    b.Navigation("asnProjectMilestone");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.asnProjectStakeholder", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "asnStakeOrgGroup")
                        .WithMany("GroupStakeInProjects")
                        .HasForeignKey("asnStakeOrgGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "asnStakeOrgRole")
                        .WithMany("roleStakeInProjects")
                        .HasForeignKey("asnStakeOrgRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "asnStakeOrgStructure")
                        .WithMany("structureStakeInProjects")
                        .HasForeignKey("asnStakeOrgStructureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectMaster", "asnStakeProjectMaster")
                        .WithMany("projectStakeholders")
                        .HasForeignKey("asnStakeProjectMasterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.MasterData.mdStake", "asnStakeType")
                        .WithMany("asnProjectStakeholderStakes")
                        .HasForeignKey("asnStakeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("asnStakeOrgGroup");

                    b.Navigation("asnStakeOrgRole");

                    b.Navigation("asnStakeOrgStructure");

                    b.Navigation("asnStakeProjectMaster");

                    b.Navigation("asnStakeType");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.paymentRecord", b =>
                {
                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.MasterData.mdPaymentInstrument", "paymentRecordInstrument")
                        .WithMany("instrumentsOfPayments")
                        .HasForeignKey("paymentRecordInstrumentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectMaster", "paymentRecordProject")
                        .WithMany("projectPaymentRecords")
                        .HasForeignKey("paymentRecordProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("paymentRecordInstrument");

                    b.Navigation("paymentRecordProject");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.paymentSchedule", b =>
                {
                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectMaster", "paymentScheduleProject")
                        .WithMany("projectPaymentSchedules")
                        .HasForeignKey("paymentScheduleProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("paymentScheduleProject");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectBudget", b =>
                {
                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectCostCenter", "budgetCostCenter")
                        .WithMany("projectCostsAtCostCenter")
                        .HasForeignKey("budgetCostCenterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("budgetCostCenter");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectCostCenter", b =>
                {
                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectMaster", "costCenterProjectMaster")
                        .WithMany("projectMasterCostCenterItems")
                        .HasForeignKey("costCenterProjectMasterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("costCenterProjectMaster");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectCostComponent", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCostComponent", "costComponentRef")
                        .WithMany("refProjectCostComponents")
                        .HasForeignKey("costComponentRefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("costComponentRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectOrigin", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDriver", "projectOriginDriver")
                        .WithMany("driversOfProjectsOrigin")
                        .HasForeignKey("projectOriginDriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGoal", "projectOriginGoal")
                        .WithMany("goalsOfProjectsOrigins")
                        .HasForeignKey("projectOriginGoalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgMilestone", "projectOriginMilestone")
                        .WithMany("milestonesOfProjectsOrigins")
                        .HasForeignKey("projectOriginMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("projectOriginDriver");

                    b.Navigation("projectOriginGoal");

                    b.Navigation("projectOriginMilestone");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdStandardAttachment", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.MasterData.mdStandardGuideline", "attachmentOfStandard")
                        .WithMany("standardGuidelineAttachments")
                        .HasForeignKey("attachmentOfStandardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("attachmentOfStandard");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnDispensationApproval", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "dispensationAprovalStructure")
                        .WithMany("structureOfDispensationApproval")
                        .HasForeignKey("dispensationApprovalStructureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "dispensationAprovalGroup")
                        .WithMany("groupOfDispensationApproval")
                        .HasForeignKey("dispensationAprovalGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "dispensationAprovalRole")
                        .WithMany("roleOfDispensationApproval")
                        .HasForeignKey("dispensationAprovalRoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.Governance.dispensationRecord", "dispensationForApprovalAsn")
                        .WithMany("dispensationApprovalAsn")
                        .HasForeignKey("dispensationForApprovalAsnId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("dispensationAprovalGroup");

                    b.Navigation("dispensationAprovalRole");

                    b.Navigation("dispensationAprovalStructure");

                    b.Navigation("dispensationForApprovalAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnDispensationRequestor", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.dispensationRecord", "dispensationOfRequestor")
                        .WithMany("dispensationRequestAsn")
                        .HasForeignKey("dispensationOfRequestorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "dispensationRequestorGroup")
                        .WithMany("groupOfDispensationRequestor")
                        .HasForeignKey("dispensationRequestorGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "dispensationRequestorRole")
                        .WithMany("roleOfDispensationRequestor")
                        .HasForeignKey("dispensationRequestorRoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "dispensationRequestorStructure")
                        .WithMany("structureOfDispensationRequestor")
                        .HasForeignKey("dispensationRequestorStructureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("dispensationOfRequestor");

                    b.Navigation("dispensationRequestorGroup");

                    b.Navigation("dispensationRequestorRole");

                    b.Navigation("dispensationRequestorStructure");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnGovernedEntityStandard", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.governedEntity", "asnGovernedEntity")
                        .WithMany("governedEntityStandardsAsn")
                        .HasForeignKey("asnGovernedEntityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astra_MK1.Model.Governance.MasterData.mdStandardGuideline", "asnGoverningStandard")
                        .WithMany("standardGovernedEntityAsn")
                        .HasForeignKey("asnGoverningStandardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.Governance.MasterData.mdGovernanceComplianceLevel", "requiredCompliance")
                        .WithMany("complianceForGovernedStandards")
                        .HasForeignKey("requiredComplianceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("asnGovernedEntity");

                    b.Navigation("asnGoverningStandard");

                    b.Navigation("requiredCompliance");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnGovernedGoverning", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.governedEntity", "asnGovernedEntity")
                        .WithMany("governedEntityAsn")
                        .HasForeignKey("asnGovernedEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.Governance.governingEntity", "asnGoverningEntity")
                        .WithMany("governingEntityAsn")
                        .HasForeignKey("asnGoverningEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("asnGovernedEntity");

                    b.Navigation("asnGoverningEntity");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.asnGoverningEntityLog", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.governanceLog", "asnGovernanceLog")
                        .WithMany("governingLogEntityAsn")
                        .HasForeignKey("asnGovernanceLogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.Governance.governingEntity", "asnGoverningEntity")
                        .WithMany("governingEntityLogAsn")
                        .HasForeignKey("asnGoverningEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("asnGovernanceLog");

                    b.Navigation("asnGoverningEntity");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.dispensationRecord", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.governanceLog", "postGovernanceDispensation")
                        .WithMany("governanceLogDispensations")
                        .HasForeignKey("postGovernanceDispensationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.Governance.governedEntity", "preGovernanceDispensation")
                        .WithMany("governedEntityDispensation")
                        .HasForeignKey("preGovernanceDispensationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("postGovernanceDispensation");

                    b.Navigation("preGovernanceDispensation");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceAttachment", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.governanceOutput", "governanceAttachmentForOutput")
                        .WithMany("governanceOutputAttachments")
                        .HasForeignKey("governanceAttachmentForOutputId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("governanceAttachmentForOutput");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceLog", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.MasterData.mdGovernanceComplianceLevel", "governanceResult")
                        .WithMany("governanceCompliances")
                        .HasForeignKey("governanceResultId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Astra_MK1.Model.Governance.governedEntity", "governanceSubject")
                        .WithMany("entityGovernanceLogs")
                        .HasForeignKey("governanceSubjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("governanceResult");

                    b.Navigation("governanceSubject");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceOutput", b =>
                {
                    b.HasOne("Astra_MK1.Model.Governance.governanceLog", "governanceOutputLog")
                        .WithMany("governanceLogOutputs")
                        .HasForeignKey("governanceOutputLogId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("governanceOutputLog");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governedEntity", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", "governedEntityDeliverable")
                        .WithMany("deliverableAsGovernedEntity")
                        .HasForeignKey("governedEntityDeliverableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.procurementDetail", "governedEntityProcurement")
                        .WithMany("procurementAsGovernedEntity")
                        .HasForeignKey("governedEntityProcurementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astra_MK1.Model.DeliveryVehicles.projectMaster", "governedEntityProject")
                        .WithMany("projectAsGovernedEntity")
                        .HasForeignKey("governedEntityProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Astra_MK1.Model.Governance.governedEntity", "parentGovernedEntity")
                        .WithMany("childGovernedEntities")
                        .HasForeignKey("parentGovernedEntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("governedEntityDeliverable");

                    b.Navigation("governedEntityProcurement");

                    b.Navigation("governedEntityProject");

                    b.Navigation("parentGovernedEntity");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governingEntity", b =>
                {
                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgGroup", "governingEntityGroup")
                        .WithMany("groupGoverningEntity")
                        .HasForeignKey("governingEntityGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgRole", "governingEntityRole")
                        .WithMany("roleGoverningEntity")
                        .HasForeignKey("governingEntityRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.BusinessPortfolio.orgStructure", "governingEntityStructure")
                        .WithMany("structureGoverningEntity")
                        .HasForeignKey("governingEntityStructureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("governingEntityGroup");

                    b.Navigation("governingEntityRole");

                    b.Navigation("governingEntityStructure");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.asnDataSourceAccessType", b =>
                {
                    b.HasOne("Astra_MK1.Model.System.MasterData.mdDataSourceAccessType", "asnAccessType")
                        .WithMany("accessTypeDataSourceAsn")
                        .HasForeignKey("asnAccessTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.System.MasterData.mdDataSource", "asnDataSource")
                        .WithMany("dataSourceAccessTypesAsn")
                        .HasForeignKey("asnDataSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.System.MasterData.mdDataSourcePriority", "asnDataSourcePriority")
                        .WithMany("dataSourcePriorityAccessTypeAsn")
                        .HasForeignKey("asnDataSourcePriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnAccessType");

                    b.Navigation("asnDataSource");

                    b.Navigation("asnDataSourcePriority");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.asnEnterpriseElementDataSource", b =>
                {
                    b.HasOne("Astra_MK1.Model.System.MasterData.mdDataSource", "asnDataSource")
                        .WithMany("dataSourceEnterpriseElementsAsn")
                        .HasForeignKey("asnDataSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.System.astraEnterpriseElement", "asnEnterpriseElement")
                        .WithMany("enterpriseElementDataSourcesAsn")
                        .HasForeignKey("asnEnterpriseElementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnDataSource");

                    b.Navigation("asnEnterpriseElement");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.asnInformationObjectEnterpriseElement", b =>
                {
                    b.HasOne("Astra_MK1.Model.System.astraEnterpriseElement", "asnEnterpriseElement")
                        .WithMany("enterpriseElementInformationObjectAsn")
                        .HasForeignKey("asnEnterpriseElementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Astra_MK1.Model.System.astraInformationObject", "asnInformationObject")
                        .WithMany("informationObjectEnterpriseElementAsn")
                        .HasForeignKey("asnInformationObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("asnEnterpriseElement");

                    b.Navigation("asnInformationObject");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.astraInformationObject", b =>
                {
                    b.HasOne("Astra_MK1.Model.System.MasterData.mdInformationSchema", "informationSchema")
                        .WithMany("schemaOfInfoObjects")
                        .HasForeignKey("informationSchemaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("informationSchema");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.informationObjectField", b =>
                {
                    b.HasOne("Astra_MK1.Model.System.MasterData.mdAstraFieldType", "fieldType")
                        .WithMany("fieldTypeOfInformationObjectField")
                        .HasForeignKey("fieldTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astra_MK1.Model.System.astraInformationObject", "informationObjectRef")
                        .WithMany("astraInformationObjectFields")
                        .HasForeignKey("informationObjectRefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("fieldType");

                    b.Navigation("informationObjectRef");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdActorType", b =>
                {
                    b.Navigation("childActorTypes");

                    b.Navigation("mdorgActorsTypes");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetCategory", b =>
                {
                    b.Navigation("assetPortfolioCategory");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAssetType", b =>
                {
                    b.Navigation("assetPortfolioAssetTypes");

                    b.Navigation("assetTypeServiceLevels");

                    b.Navigation("childAssetTypes");

                    b.Navigation("orgDeliverableTypes");

                    b.Navigation("refDeliverableTypes");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthAccessLevel", b =>
                {
                    b.Navigation("mdJobAssetAuths");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdAuthorityLevel", b =>
                {
                    b.Navigation("asnMotivationalRoleAuthorityAccessLevels");

                    b.Navigation("authorityAccessLevels");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCapacityMesaurementUnit", b =>
                {
                    b.Navigation("capacityDesignUnits");

                    b.Navigation("capacitySpendingUnit");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCompetencyLevel", b =>
                {
                    b.Navigation("skillParamsCompetencies");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdComplexity", b =>
                {
                    b.Navigation("assetComplexities");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdCumulativeStakeCap", b =>
                {
                    b.Navigation("MdAuthAccessLevel");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdDriverType", b =>
                {
                    b.Navigation("OrgDriverRefs");

                    b.Navigation("childDriverTypes");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdFrequency", b =>
                {
                    b.Navigation("alertServicesFrequency");

                    b.Navigation("assetPortfolioFrequeny");

                    b.Navigation("frequenciesOpEx");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGeneralScale", b =>
                {
                    b.Navigation("asnMotivationalPriorities");

                    b.Navigation("assetComplexRelationVitalities");

                    b.Navigation("assetComplexRelationfulfillmentWeightages");

                    b.Navigation("assetPortfolioGeneralSaclesCVI");

                    b.Navigation("assetPortfolioGeneralSaclesVol");

                    b.Navigation("incidentManagementRecordsPriority");

                    b.Navigation("motivationalDimensionImportances");

                    b.Navigation("orgRolesGeneralScale");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdGoalType", b =>
                {
                    b.Navigation("goalTypeOfGoals");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdImpact", b =>
                {
                    b.Navigation("assetPortfolioDependencyImpacts");

                    b.Navigation("buildingBlockNonAvailabilityImpacts");

                    b.Navigation("incidentsManagementRecordImpacts");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdManagementMethod", b =>
                {
                    b.Navigation("childMethods");

                    b.Navigation("phases");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdMotivationalDimension", b =>
                {
                    b.Navigation("motivationalDimensions");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPhase", b =>
                {
                    b.Navigation("assetPortfolioPhase");

                    b.Navigation("orgStructuresPhase");

                    b.Navigation("procurementDetailPhases");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPortfolioCategory", b =>
                {
                    b.Navigation("assetPortfolioCategories");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdPredicate", b =>
                {
                    b.Navigation("skillParamsPredicates");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdRoleType", b =>
                {
                    b.Navigation("roles");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdSecurityQuestion", b =>
                {
                    b.Navigation("_userCredentials");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdSkillType", b =>
                {
                    b.Navigation("skillParamSkillTypes");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.MasterData.mdStake", b =>
                {
                    b.Navigation("asnMotivationalRoleStakeholderTypes");

                    b.Navigation("asnProjectStakeholderStakes");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCLType", b =>
                {
                    b.Navigation("procurementDetailsCOTS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refCostComponent", b =>
                {
                    b.Navigation("refCapExCostComponents");

                    b.Navigation("refOpExCostComponents");

                    b.Navigation("refProjectCostComponents");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refIncidentStatus", b =>
                {
                    b.Navigation("incidentStatusesManagement");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refJob", b =>
                {
                    b.Navigation("asnGroupJobs");

                    b.Navigation("asnJobAssetAuths");

                    b.Navigation("asnJobDeliverableJobs");

                    b.Navigation("asnMotivationalJobs");

                    b.Navigation("asnRoleJobJobs");

                    b.Navigation("childJobs");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOpExType", b =>
                {
                    b.Navigation("opExTypeExpenditures");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOrgStatus", b =>
                {
                    b.Navigation("orgStructuresStatus");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refOrgType", b =>
                {
                    b.Navigation("orgStructuresType");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refPhoneType", b =>
                {
                    b.Navigation("locPhone");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refProcurementDocumentType", b =>
                {
                    b.Navigation("procurementDocumentTypes");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refProcurementType", b =>
                {
                    b.Navigation("procurementDetailTypeRefs");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRank", b =>
                {
                    b.Navigation("orgRolesRank");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRole", b =>
                {
                    b.Navigation("asnMotivationalRoleRoles");

                    b.Navigation("asnRoleJobRoles");

                    b.Navigation("asnRoleSkillsRole");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refRoleContext", b =>
                {
                    b.Navigation("roles");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refSkill", b =>
                {
                    b.Navigation("childSkills");

                    b.Navigation("skillParamSkills");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.ReferenceData.refTimeUnit", b =>
                {
                    b.Navigation("alertServicesTimeUnit");

                    b.Navigation("capacityMeasurementUnits");

                    b.Navigation("timeUnitMaxResolution");

                    b.Navigation("timeUnitMaxResponse");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.alertService", b =>
                {
                    b.Navigation("procurementDetailAlerts");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.asnMotivational", b =>
                {
                    b.Navigation("refAsnMotivationalRoles");

                    b.Navigation("refAsnMotivationalSkills");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.assetPortfolio", b =>
                {
                    b.Navigation("asnJobAssetAuths");

                    b.Navigation("assetComplexRelationBuildingBlocks");

                    b.Navigation("assetComplexRelationSourceAssets");

                    b.Navigation("assetIncidentsManagementRecord");

                    b.Navigation("assetOpExs");

                    b.Navigation("assetServiceLevels");

                    b.Navigation("assetsHistory");

                    b.Navigation("capacityUtilizationRecords");

                    b.Navigation("childAssets");

                    b.Navigation("procurementDetailAssets");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capExDetail", b =>
                {
                    b.Navigation("costComponents");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.capacityDesign", b =>
                {
                    b.Navigation("assetPortfolioCapacity");

                    b.Navigation("capacityDesignSpendings");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentEscalationModelGroup", b =>
                {
                    b.Navigation("esclationGroupOfServiceLevel");

                    b.Navigation("incidentEsclationModelGroups");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentEsclationModel", b =>
                {
                    b.Navigation("esclationOfServiceLevel");

                    b.Navigation("incidentEsclationLevelRoleAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementRecord", b =>
                {
                    b.Navigation("childIncidentRecords");

                    b.Navigation("managementRecordAttachments");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.incidentManagementStatus", b =>
                {
                    b.Navigation("incidentManagementRecordStatuses");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.operationalExpenditure", b =>
                {
                    b.Navigation("operationalExpenditureComponents");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgActor", b =>
                {
                    b.Navigation("actorOfRoles");

                    b.Navigation("actorsHistory");

                    b.Navigation("orgActorSkillsAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgDeliverable", b =>
                {
                    b.Navigation("asnMotivationalDeliverables");

                    b.Navigation("asnOrgDeliverables");

                    b.Navigation("childDeliverables");

                    b.Navigation("deliverableAsGovernedEntity");

                    b.Navigation("deliverablesHistory");

                    b.Navigation("deliverablesOfProjectMilestones");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgDriver", b =>
                {
                    b.Navigation("asnMotivationalDrivers");

                    b.Navigation("childOrgDrivers");

                    b.Navigation("dimensionalImportances");

                    b.Navigation("driverOpExs");

                    b.Navigation("driversHistory");

                    b.Navigation("driversOfProjectsOrigin");

                    b.Navigation("procurementDetailDrivers");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgGoal", b =>
                {
                    b.Navigation("asnMotivationalGoals");

                    b.Navigation("childGoals");

                    b.Navigation("goalsHistory");

                    b.Navigation("goalsOfProjects");

                    b.Navigation("goalsOfProjectsOrigins");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgGroup", b =>
                {
                    b.Navigation("GroupJobsAsn");

                    b.Navigation("GroupSkillsAsn");

                    b.Navigation("GroupStakeInProjects");

                    b.Navigation("asnMotivationalRoleGroups");

                    b.Navigation("groupGoverningEntity");

                    b.Navigation("groupIncidentEsclationAsn");

                    b.Navigation("groupOfDispensationApproval");

                    b.Navigation("groupOfDispensationRequestor");

                    b.Navigation("groupsHistory");

                    b.Navigation("orgGroupIncidents");

                    b.Navigation("orgGroupRoleAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgLocation", b =>
                {
                    b.Navigation("locPhones");

                    b.Navigation("orgStructures");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgMilestone", b =>
                {
                    b.Navigation("asnMotivationalMilestones");

                    b.Navigation("childMilestones");

                    b.Navigation("milestonesHistory");

                    b.Navigation("milestonesOfProjectGoals");

                    b.Navigation("milestonesOfProjectsOrigins");

                    b.Navigation("procurementDetailMilestones");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgRole", b =>
                {
                    b.Navigation("asnIncidentEscalationRoles");

                    b.Navigation("childRoles");

                    b.Navigation("orgRoleGroupsAsn");

                    b.Navigation("orgRoleIncidents");

                    b.Navigation("roleGoverningEntity");

                    b.Navigation("roleOfActors");

                    b.Navigation("roleOfDispensationApproval");

                    b.Navigation("roleOfDispensationRequestor");

                    b.Navigation("roleStakeInProjects");

                    b.Navigation("rolesHistory");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.orgStructure", b =>
                {
                    b.Navigation("asnMotivationalStructures");

                    b.Navigation("assetPortfolioOrgStructureManager");

                    b.Navigation("assetPortfolioOrgStructureOwner");

                    b.Navigation("childOrgs");

                    b.Navigation("orgGroupStructures");

                    b.Navigation("orgStructureIncidents");

                    b.Navigation("structureGoverningEntity");

                    b.Navigation("structureOfDispensationApproval");

                    b.Navigation("structureOfDispensationRequestor");

                    b.Navigation("structureStakeInProjects");

                    b.Navigation("structuresHistory");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.procurementDetail", b =>
                {
                    b.Navigation("capExProcurements");

                    b.Navigation("procurementAsGovernedEntity");

                    b.Navigation("procurementDocuments");

                    b.Navigation("refCOTS");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.serviceLevel", b =>
                {
                    b.Navigation("childServiceLevels");

                    b.Navigation("incidentServiceLevels");
                });

            modelBuilder.Entity("Astra_MK1.Model.BusinessPortfolio.skillParam", b =>
                {
                    b.Navigation("asnMotivationalSkillParams");

                    b.Navigation("asnRoleSkills");

                    b.Navigation("groupSkillsAsn");

                    b.Navigation("skillParamsAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.MasterData.mdPaymentInstrument", b =>
                {
                    b.Navigation("instrumentsOfPayments");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectBudget", b =>
                {
                    b.Navigation("budgetCostComponentAsns");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectCostCenter", b =>
                {
                    b.Navigation("projectCostsAtCostCenter");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectCostComponent", b =>
                {
                    b.Navigation("costComponentBudgetAsns");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectMaster", b =>
                {
                    b.Navigation("projectAsGovernedEntity");

                    b.Navigation("projectMasterCostCenterItems");

                    b.Navigation("projectMasterOrigins");

                    b.Navigation("projectOutputs");

                    b.Navigation("projectPaymentRecords");

                    b.Navigation("projectPaymentSchedules");

                    b.Navigation("projectStakeholders");
                });

            modelBuilder.Entity("Astra_MK1.Model.DeliveryVehicles.projectOrigin", b =>
                {
                    b.Navigation("projectOriginMasters");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdGovernanceComplianceLevel", b =>
                {
                    b.Navigation("complianceForGovernedStandards");

                    b.Navigation("governanceCompliances");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdPPImplication", b =>
                {
                    b.Navigation("orgDriverRefs");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.MasterData.mdStandardGuideline", b =>
                {
                    b.Navigation("standardGovernedEntityAsn");

                    b.Navigation("standardGuidelineAttachments");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.dispensationRecord", b =>
                {
                    b.Navigation("dispensationApprovalAsn");

                    b.Navigation("dispensationRequestAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceLog", b =>
                {
                    b.Navigation("governanceLogDispensations");

                    b.Navigation("governanceLogOutputs");

                    b.Navigation("governingLogEntityAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governanceOutput", b =>
                {
                    b.Navigation("governanceOutputAttachments");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governedEntity", b =>
                {
                    b.Navigation("childGovernedEntities");

                    b.Navigation("entityGovernanceLogs");

                    b.Navigation("governedEntityAsn");

                    b.Navigation("governedEntityDispensation");

                    b.Navigation("governedEntityStandardsAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.Governance.governingEntity", b =>
                {
                    b.Navigation("governingEntityAsn");

                    b.Navigation("governingEntityLogAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdAstraFieldType", b =>
                {
                    b.Navigation("fieldTypeOfInformationObjectField");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdDataSource", b =>
                {
                    b.Navigation("dataSourceAccessTypesAsn");

                    b.Navigation("dataSourceEnterpriseElementsAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdDataSourceAccessType", b =>
                {
                    b.Navigation("accessTypeDataSourceAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdDataSourcePriority", b =>
                {
                    b.Navigation("dataSourcePriorityAccessTypeAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.MasterData.mdInformationSchema", b =>
                {
                    b.Navigation("schemaOfInfoObjects");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.astraEnterpriseElement", b =>
                {
                    b.Navigation("enterpriseElementDataSourcesAsn");

                    b.Navigation("enterpriseElementInformationObjectAsn");
                });

            modelBuilder.Entity("Astra_MK1.Model.System.astraInformationObject", b =>
                {
                    b.Navigation("astraInformationObjectFields");

                    b.Navigation("informationObjectEnterpriseElementAsn");
                });
#pragma warning restore 612, 618
        }
    }
}
